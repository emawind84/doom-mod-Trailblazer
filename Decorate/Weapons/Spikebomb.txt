Actor PipeSelected : Inventory { Inventory.MaxAmount 1 }
Actor SpikebombTrigger : Inventory { Inventory.MaxAmount 1 }
Actor TossPower : Inventory { Inventory.MaxAmount 30 }
Actor PipeUpgrade : Inventory { Inventory.MaxAmount 1 }
Actor PipeMode : Inventory { Inventory.MaxAmount 1 }

//Quick-throw item
ACTOR PipeTossTimer : Inventory { Inventory.MaxAmount 280 } //8 seconds.
ACTOR PipeTossCounter : Inventory { Inventory.MaxAmount 1 }

ACTOR PipeRiftToggler : CustomInventory
{
  Inventory.Amount 1
  Inventory.MaxAmount 1
  Inventory.InterHubAmount 1
  Inventory.PickupMessage "You shouldn't drop this in the first place, dummy."
  Inventory.Icon "ARTIPIPE"
  +INVENTORY.INVBAR
  +INVENTORY.UNDROPPABLE
  Tag "Riftbomb Toggle"
  States
  {
  Spawn:
    PBMB A -1
    Stop
  Use:
	"####" A 0 A_PlaySound("Tinker/Tink",4,0.7)
    TNT1 A 0 A_JumpIfInventory("RiftbombActive",1,"DeUse")
	"####" A 0 A_Print("\c[white]Riftbomb\n\c[green]Engaged.",2)
	"####" A 0 A_GiveInventory("RiftbombActive",1)
    Fail
  DeUse:
	"####" A 0 A_Print("\c[white]Riftbomb\n\c[red]Disengaged.",2)
	"####" A 0 A_TakeInventory("RiftbombActive",1)
    Fail
  }
}

//Switch tokens.
Actor GoForRang : Inventory { Inventory.MaxAmount 1 }
Actor GoForKick : GoForRang {}
Actor GoForColts : GoForRang {}
Actor GoForFlesh : GoForRang {}
Actor GoForJustice : GoForRang {}
Actor GoForFMG : GoForRang {}
Actor GoForSpitter : GoForRang {}
Actor GoForDaddy : GoForRang {}
Actor GoForMaker : GoForRang {}
Actor GoForBombs : GoForRang {}
Actor GoForSkull : GoForRang {}
Actor GoForCracker : GoForRang {}
Actor GoForPain : GoForRang {}
Actor GoForConka : GoForRang {}
Actor GoForZZTop : GoForRang {}

ACTOR PipeQuickToss : CustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	Inventory.InterHubAmount 1
	Inventory.PickupMessage "I kill bugs!... Dead."
	-INVENTORY.INVBAR
	+INVENTORY.UNDROPPABLE
	States
	{
	Spawn:
		PBMB A -1
		Stop
	Use:
		TNT1 A 0 A_JumpIfInventory("SpikebombAmmo",1,1)
		Fail
	
		TNT1 A 0 {
			if(CountInv("SpikebombAmmo") && GetCvar("TB_TraditionalQuickToss") && !CountInv("PipeTossCounter"))
			{
				Return State("OyMatey");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("MacheteSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForRang");
				Return State("Bazinga"); //Read each Bazinga slightly different for maximum effect.
			}
			else if(CountInv("SpikebombAmmo") && CountInv("SideSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForKick");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("ColtsSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForColts");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("RendSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForFlesh");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("ChromeSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForJustice");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("FMGSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForFMG");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("LeadSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForSpitter");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("PattySelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForDaddy");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("BitchSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForMaker");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("PipeSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForBombs");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("ThrottleSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForSkull");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("NutterSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForCracker");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("PaintrainSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForPain");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("ConquerorSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForConka");
				Return State("Bazinga");
			}
			else if(CountInv("SpikebombAmmo") && CountInv("EliminatorSelected") && !CountInv("PipeTossCounter"))
			{
				A_GiveInventory("GoForZZTop");
				Return State("Bazinga");
			}
			else
			{
				Return State("Nope");
			}
			Return State("Nope");
		} 
		Fail
	Bazinga:
		TNT1 A 0 {
			//Flush tokens.
			A_TakeInventory("MacheteSelected",1);
			A_TakeInventory("SideSelected",1);
			A_TakeInventory("ColtsSelected",1);
			A_TakeInventory("RendSelected",1);
			A_TakeInventory("ChromeSelected",1);
			A_TakeInventory("FMGSelected",1);
			A_TakeInventory("LeadSelected",1);
			A_TakeInventory("PattySelected",1);
			A_TakeInventory("BitchSelected",1);
			A_TakeInventory("PipeSelected",1);
			A_TakeInventory("ThrottleSelected",1);
			A_TakeInventory("NutterSelected",1);
			A_TakeInventory("PaintrainSelected",1);
			A_TakeInventory("ConquerorSelected",1);
			A_TakeInventory("EliminatorSelected",1);
			
			A_SelectWeapon("SpikebombTossWeapon");
		}
		Fail
	OyMatey:
		//TNT1 A 0 A_JumpIfInventory("Mana",25,1)
		//Fail
		TNT1 A 0 A_JumpIfInventory("PipeTossCounter",1,"Nope")
		TNT1 A 0 {
			A_GiveInventory("PipeTossCounter",1);
			if(!GetCvar("TB_NapoleonDynamite")) {
				A_GiveInventory("PipeTossTimer",280);
			}
			A_TakeInventory("SpikebombAmmo",1,TIF_NOTAKEINFINITE);
			ACS_NamedExecuteAlways("Pipe Blockade");
			A_PlaySound("Flechette/Throw");
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 5);
			}
		}
		TNT1 A 0 A_GiveInventory("TossPower",3)
		TNT1 A 0 A_JumpIfInventory("RiftbombActive",1,3)
		TNT1 A 0 A_FireCustomMissile("SpikebombProjectile2",0,0,0,-4,FPF_NOAUTOAIM,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_FireCustomMissile("RiftbombProjectile",0,0,0,-4,FPF_NOAUTOAIM)
	Nope:
		TNT1 A 0
		Fail
	}
}

Actor SpikebombTossWeapon : Weapon
{
	Weapon.SelectionOrder 9
	+CHEATNOTWEAPON
	States
	{
	Spawn:
		TNT1 A -1
		Loop
	Select:
		TNT1 A 0 {
			A_Overlay(-21,"none");
			A_Overlay(-25,"none");
			
			A_Overlay(-12,"none");
			A_Overlay(-11,"none");
			A_Overlay(-10,"none");
			A_Overlay(-6,"none");
			A_Overlay(-5,"none");
			A_Overlay(-4,"none");
			A_Overlay(-3,"none");
		}
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise
		Goto Ready
		
	Ready:
		TNT1 A 0 {
			A_PlaySound("General/Toss",1,0.9);
			A_PlaySound("Machete2/Slash",5,0.2);
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 4);
			}
		}
		MCHT ABC 1
		TNT1 A 0 A_GiveInventory("PipeTossCounter",1)
		TNT1 A 0 A_GiveInventory("PipeTossTimer",280)
		TNT1 A 0 A_TakeInventory("SpikebombAmmo",1,TIF_NOTAKEINFINITE)
		TNT1 A 0 ACS_NamedExecuteAlways("Pipe Blockade")
		MCHT A 0 A_JumpIfInventory("RiftbombActive", 1, "RiftToss")
		MCHT A 0 A_FireCustomMissile("SpikebombProjectile2",0,0,10,0,FPF_NOAUTOAIM)
		Goto ThrowContinue
	RiftToss:
		MCHT A 0 A_FireCustomMissile("RiftbombProjectile",0,0,10,0,FPF_NOAUTOAIM)
	ThrowContinue:
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		MCHT E 1
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		MCHT G 1
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		MCHT I 1
		TNT1 A 3
		Goto GoOn
		
	GoOn:
		TNT1 A 0 {
			
			//Machete.
			if(CountInv("GoForRang"))
			{
				A_TakeInventory("GoForRang");
				A_SelectWeapon("Macheterang");
			}
			
			//Sidekick.
			else if(CountInv("GoForKick"))
			{
				A_TakeInventory("GoForKick");
				if(CountInv("HexenCounter"))
				{
					A_SelectWeapon("Sidekick2");
				}
				else
				{
					A_SelectWeapon("Sidekick");
				}
			}
			
			//Colts.
			else if(CountInv("GoForColts"))
			{
				A_TakeInventory("GoForColts");
				A_SelectWeapon("Colts");
			}
			
			//Fleshrend.
			else if(CountInv("GoForFlesh"))
			{
				A_TakeInventory("GoForFlesh");
				A_SelectWeapon("Fleshrend");
			}
			
			//Chrome Justice.
			else if(CountInv("GoForJustice"))
			{
				A_TakeInventory("GoForJustice");
				A_SelectWeapon("ChromeJustice");
			}
			
			//FMG.
			else if(CountInv("GoForFMG"))
			{
				A_TakeInventory("GoForFMG");
				A_SelectWeapon("FMG");
			}
			
			//Leadspitter.
			else if(CountInv("GoForSpitter"))
			{
				A_TakeInventory("GoForSpitter");
				A_SelectWeapon("Leadspitter");
			}
			
			//Patriarch.
			else if(CountInv("GoForDaddy"))
			{
				A_TakeInventory("GoForDaddy");
				A_SelectWeapon("Patriarch");
			}
			
			//Bitchmaker.
			else if(CountInv("GoForMaker"))
			{
				A_TakeInventory("GoForMaker");
				A_SelectWeapon("Bitchmaker");
			}
			
			//Spikebombs.
			else if(CountInv("GoForBombs"))
			{
				A_TakeInventory("GoForBombs");
				A_SelectWeapon("SpikebombWeapon");
			}
			
			//Throttle.
			else if(CountInv("GoForSkull"))
			{
				A_TakeInventory("GoForSkull");
				if(CountInv("HexenCounter"))
				{
					A_SelectWeapon("Skullthrottle2");
				}
				else
				{
					A_SelectWeapon("Skullthrottle");
				}
			}
			
			//Nutcracker.
			else if(CountInv("GoForCracker"))
			{
				A_TakeInventory("GoForCracker");
				A_SelectWeapon("Nutcracker");
			}
			
			//Paintrain.
			else if(CountInv("GoForPain"))
			{
				A_TakeInventory("GoForPain");
				A_SelectWeapon("Paintrain");
			}
			
			//Conqueror.
			else if(CountInv("GoForConka"))
			{
				A_TakeInventory("GoForConka");
				A_SelectWeapon("Conqueror");
			}
			
			//Eliminator.
			else if(CountInv("GoForZZTop"))
			{
				A_TakeInventory("GoForZZTop");
				A_SelectWeapon("Eliminator");
			}
		}
		
		TNT1 A 1
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower
		Goto Ready
	Fire:
		TNT1 A 1
		Goto GoOn
	}
}

Actor SpikebombWeapon : Weapon
{
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "SpikebombAmmo"
	Weapon.SlotNumber 5
	Weapon.SelectionOrder 8
	Weapon.UpSound "Spikebomb/Up"
	Weapon.Kickback 350
	Inventory.PickupSound "misc/w_pkup"
	Inventory.PickupMessage "Son, I have become blender - destroyer of worlds."
	Obituary "%o should've had not trod near %k's extreme toilet plunger."
	Weapon.BobStyle "InverseSmooth"
	Weapon.BobSpeed 2.1
	Weapon.BobRangeY 0.3
	Weapon.BobRangeX 0.6
	Tag "Master Exploder"
	+NOALERT
	+WEAPON.AMMO_OPTIONAL
	+INVENTORY.UNDROPPABLE
	States
	{
	//Shared stuff
	Ready:
		TNT1 A 0 A_Overlay(-3,"PipeUp") //Had to swap them as the toss animation, as funky as it is, looks even odder when it's clipping above the detonator.
		TNT1 A 0 A_Overlay(2,"DetonatorUp")
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
	ReadyMain:
		TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD)
		Loop
	Fire:
		TNT1 A 0
		Goto ReadyMain
	Reload:
		"####" A 0 A_JumpIfInventory("PipeUpgrade",1,1)
		Goto ReadyMain
		"####" A 0 A_PlaySound("Tinker/Tink",4,0.7)
		"####" A 0 A_JumpIfInventory("PipeMode",1,4)
		"####" A 0 A_Print("\c[white]Vacuum Imploder\n\c[green]Engaged.",1)
		"####" A 0 A_GiveInventory("PipeMode",1)
		"####" A 20 A_WeaponReady(WRF_NOFIRE)
		Goto ReadyMain
		"####" A 0 A_Print("\c[white]Vacuum Imploder\n\c[red]Disengaged.",1)
		"####" A 0 A_TakeInventory("PipeMode",1)
		"####" A 20 A_WeaponReady(WRF_NOFIRE)
		Goto ReadyMain
	Deselect:
		TNT1 A 0 {
			A_TakeInventory("PipeSelected");
			A_TakeInventory("PowerCrafterTimer");
			A_Overlay(-3,"PipeDown");
			A_Overlay(2,"DetonatorDown");
			A_TakeInventory("SpikebombTrigger");
			A_ZoomFactor(1.0);
		}
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 0 SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH)
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower
		TNT1 A 1 A_Lower
		Wait
	Select:
		TNT1 A 0 A_GiveInventory("PipeSelected")
		TNT1 A 0 SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH)
		TNT1 A 0 A_Raise
		TNT1 A 1 A_Raise
		Loop

	//Right side
	PipeUp:
		PIPS A 0 A_JumpIfInventory("SpikebombAmmo",1,2)
		TNT1 A 0
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		"####" B 1
		"####" C 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		"####" D 1
		"####" E 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		"####" F 1
		"####" G 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		"####" H 1
		Goto PipeIdle
	PipeIdle:
		PIPG A 0 A_JumpIfInventory("SpikebombAmmo",1,1)
		Goto PipeEmpty
		PIPG A 1
		PIPG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ALTATTACK), "Throw")
		PIPG A 0 A_JumpIf(CountInv("MacheteGoesFast") > 0 && CountInv("MacheteAmmo") > 0, "CaberToss")
		Loop
	PipeEmpty:
		TNT1 A 0 A_JumpIfInventory("SpikebombAmmo",1,"PipeUp")
		TNT1 A 1
		TNT1 A 0 A_JumpIf(CountInv("MacheteGoesFast") > 0 && CountInv("MacheteAmmo") > 0, "CaberTossEmpty")
		Loop
	PipeDown:
		PIPS A 0 A_JumpIfInventory("SpikebombAmmo",1,2)
		TNT1 A 0
		"####" H 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		"####" G 1
		"####" F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		"####" E 1
		"####" D 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		"####" C 1
		"####" B 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		"####" A 1
		Stop
	Throw:
		DETG A 1 A_JumpIfInventory("SpikebombAmmo",1,1)
		Goto ReadyMain
		PIPT A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		PIPT B 1
		PIPT C 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		PIPT D 1
		PIPT E 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		PIPT F 1
		PIPT G 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		PIPT H 1
		PIPT I 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		PIPT J 1
	ThrowHold: //At first I thought its a good idea, but then I realized it might
			   //make the player confused in terms why suddenly throw power builds up faster.
			   //Since control over your toss should be always the same so you won't suddenly
			   //screw it up, I'll leave it intact.
		/*TNT1 A 1 //A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 1 //A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 //A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)*/
		TNT1 A 3
		TNT1 A 0 A_JumpIfInventory("PowerStrength2",1,2)
		TNT1 A 0 A_JumpIfInventory("TossPower",20,2)
		TNT1 A 0 A_GiveInventory("TossPower",1)
		DETG A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ALTATTACK), "ThrowHold")
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 0 {
			A_PlaySound("General/Toss",1,0.9);
			A_PlaySound("Machete2/Slash",5,0.2);
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 4);
			}
		}
		MCHT ABC 1
		MCHT A 0 A_TakeInventory("SpikebombAmmo", 1, TIF_NOTAKEINFINITE)
		MCHT A 0 A_JumpIfInventory("RiftbombActive", 1, "RiftToss")
		MCHT A 0 A_FireCustomMissile("SpikebombProjectile",0,0,10,0,FPF_NOAUTOAIM)
		Goto ThrowContinue
	RiftToss:
		MCHT A 0 A_FireCustomMissile("RiftbombProjectile",0,0,10,0,FPF_NOAUTOAIM)
	ThrowContinue:
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		MCHT E 1
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		MCHT G 1
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		MCHT I 1
		TNT1 A 3
		TNT1 A 0 A_JumpIfInventory("SpikebombAmmo",1,1)
		Goto PipeEmpty
		PIPT J 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		PIPT I 1
		PIPT H 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		PIPT G 1
		PIPT F 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		PIPT E 1
		PIPT D 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		PIPT C 1
		PIPT B 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		PIPT A 1
		Goto PipeIdle
	CaberTossEmpty:
		TNT1 A 0 A_JumpIfInventory("MacheteAmmo",1,8)
		Goto PipeEmpty
	CaberToss:
		TNT1 A 0 A_JumpIfInventory("SpikebombAmmo",1,2)
		TNT1 A 0 A_Jump(256,6)
		PIPS HFDBA 1
	CaberMain:
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		TNT1 A 1
		TNT1 A 0 {
				A_PlaySound("Machete1/Slash",1,0.9);
				A_PlaySound("Machete2/Slash",5,0.2);
				If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 4);
			}
		}
		MCHT ABC 1
		MCHT A 0 A_TakeInventory("MacheteAmmo",1,TIF_NOTAKEINFINITE)
		TNT1 A 0 A_JumpIfInventory("PowerStrength2",1,3)
		MCHT A 0 {
			if(A_JumpIf(CountInv("PowerAmmoJunkie") > 0, "Null")) {
				A_SpawnItemEx("MacheterangProjectileJunkie",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			} Else {
				A_SpawnItemEx("MacheterangProjectile",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			}
		}
		TNT1 A 0 A_Jump(256,2)
		MCHT A 0 {
			if(A_JumpIf(CountInv("PowerAmmoJunkie") > 0, "Null")) {
				A_SpawnItemEx("MacheterangBerserkProjectileJunkie",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			} Else {
				A_SpawnItemEx("MacheterangBerserkProjectile",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			}
		}
		// This solution is ten times better. Just let it bouncecount out.
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		MCHT E 1
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		MCHT G 1
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		MCHT I 1
		TNT1 A 3
		TNT1 A 0 A_JumpIf(CountInv("MacheteGoesFast") > 0 && CountInv("MacheteAmmo") > 0, "CaberMain")

		TNT1 A 0 A_JumpIfInventory("SpikebombAmmo",1,2)
		TNT1 A 0 A_Jump(256,"PipeEmpty")
		PIPS ACEGH 1
		Goto PipeIdle
	
	//Left side
	DetonatorUp:
		DETS A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETS B 1
		DETS C 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETS D 1
		DETS E 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETS F 1
		DETS G 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETS H 1
	DetonatorIdle:
		DETG A 1
		DETG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "Detonate")
		DETG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "Punch")
		Loop
	DetonatorDown:
		DETS H 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETS G 1
		DETS F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETS E 1
		DETS D 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETS C 1
		DETS B 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETS A 1
		Stop
	Detonate:
		DETC A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETC B 1
		DETC C 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETC D 1
		DETC E 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETC E 1
		DETC F 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETC G 1
		DETC H 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETC I 1
		DETC I 0 {
				A_PlaySound("Spikebomb/Detonate",5);
				A_GiveInventory("SpikebombTrigger");
				If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 4);
			}
		}
		DETC J 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETC K 1
		DETC L 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETC M 1
		DETC N 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETC N 2
		DETC I 0 A_TakeInventory("SpikebombTrigger")
		DETC M 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETC L 1
		DETC K 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETC J 1
		DETC I 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1)
		DETC HA 1
		DETG A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1)
		DETG A 1
		DETG A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1)
		DETG A 2
		Goto DetonatorIdle
	Punch:
		DETS HFDBA 1
	PunchLoop:
		"####" A 0 {
				If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", 4);
			}
		}
		QML1 A 0 A_JumpIfInventory("PowerStrength2",1,2)
		QML1 A 0 A_Jump(256,3)
		FML1 A 0 A_SetBlend("Orange",0.05,10)
		FML1 A 0 A_PlaySound("Melee/Firepunch",5)
		"####" A 0 A_PlaySound("Punch/Swing",6,1.0)
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2)
		"####" A 1 A_SetPitch(pitch-0.3, SPF_INTERPOLATE)
		"####" B 1 A_SetPitch(pitch-0.3, SPF_INTERPOLATE)
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2)
		"####" C 1 A_SetPitch(pitch-0.3, SPF_INTERPOLATE)
		"####" D 1 A_SetPitch(pitch-0.3, SPF_INTERPOLATE)
		"####" A 0 A_JumpIfInventory("KineticFist",1,"KineticPunch")
		"####" A 0 A_JumpIfInventory("PowerStrength2",1,3)
		"####" A 0 A_CustomPunch(30, 1, 0, "PunchCracker", 100)
		"####" A 0 A_Jump(256,"PunchContinue")
		"####" A 0 A_CustomPunch(90, 1, 0, "FlamePunchCracker", 150,0.06)
		Goto PunchContinue
	KineticPunch:
		"####" A 0 A_JumpIfInventory("PowerStrength2",1,3)
		"####" A 0 A_CustomPunch(30, 1, 0, "PunchCracker", 300)
		"####" A 0 A_Jump(256,"PunchContinue")
		"####" A 0 A_CustomPunch(90, 1, 0, "FlamePunchCracker2", 350,0.06)
		Goto PunchContinue
	PunchContinue:
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2)
		"####" E 1 A_SetPitch(pitch+0.3, SPF_INTERPOLATE)
		"####" F 1 A_SetPitch(pitch+0.3, SPF_INTERPOLATE)
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2)
		"####" G 1 A_SetPitch(pitch+0.3, SPF_INTERPOLATE)
		"####" H 1 A_SetPitch(pitch+0.3, SPF_INTERPOLATE)
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2)
		"####" I 1
		"####" J 1
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2)
		"####" K 1
		TNT1 A 5
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "PunchLoop")
		DETS ACEGH 1
		Goto DetonatorIdle
	Spawn:
		PBMB A -1
		Stop
	}
}

Actor RiftbombProjectile : FastProjectile
{
	Radius 11
	Height 7
	MissileHeight 20
	Speed 500
	Var Int User_Blastspan;
	DamageType "Patriarch"
	Scale 0.3
	MissileType "SpikebombTrail"
	States
	{
	Spawn:
		TNT1 A 1 //PBMB A 1 //If only the MissileHeight would work as intended.
		Loop
	Death:
		TNT1 A 0 {
			if(A_JumpIf(CountInv("MasterExploder", AAPTR_TARGET) > 0, "Null"))
			{
				A_SetDamageType("MasteringExplosions");
			}
			A_Stop;
			A_ChangeFlag("NOGRAVITY",1);
			A_ChangeFlag("NOINTERACTION",1);
		}
		TNT1 A 0 A_JumpIfInTargetInventory("PipeMode",1,2)
		TNT1 A 0 A_Jump(256,2)
		PBMB A 47 A_SpawnItemEx("SpikebombImplosion",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS)
			
		TNT1 A 0 {
			A_SetUserVar("User_Blastspan",14);
			
			A_PlaySound("Spikebomb/Explosion",5,0.9);
			A_PlaySound("Spikebomb/Add",7);
			A_PlaySound("Spikebomb/Far",6,0.8);
			
			A_SpawnItemEx("SpikebombBurst",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("SpipeMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
			
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN);
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			
			A_Explode(250,364,0,1);
			A_Explode(150,256,1,1);
		}
	DeathLoop:
		TNT1 A 0 A_SetUserVar("User_Blastspan",User_Blastspan - 1)
		TNT1 A 4 { A_Explode(20,364,0,1); A_Explode(10,256,1,1); }
		TNT1 A 0 A_JumpIf(User_Blastspan <= 0, 1)
		Loop
		TNT1 A 6
		Stop
	}
}

Actor SpikebombTrail
{
	+NOINTERACTION
	Renderstyle Translucent
	Scale 0.3
	States
	{
	Spawn:
	PBMB A 1 A_FadeOut(0.1)
	Loop
	}
}

Actor SpikebombProjectile// : SpikebombAmmo
{
	Radius 11
	Height 7
	Speed 3
	Damage 0
	Health 30
	//Inventory.MaxAmount 0
	//Inventory.PickupSound "Spikebomb/Pick"
	ProjectileKickback 300
	Projectile
	//+Inventory.AutoActivate
	//+Inventory.AlwaysPickup
	//-INVBAR
	+NOBLOOD +NOICEDEATH +CANBOUNCEWATER
	+BOUNCEONWALLS +BOUNCEONCEILINGS +BOUNCEONFLOORS
	-NOGRAVITY +FORCERADIUSDMG
	+THRUGHOST +BLOODLESSIMPACT
	BounceSound "Spikebomb/Bounce"
	BounceFactor 0.4
	WallBounceFactor 0.8
	BounceType "Doom"
	Gravity 0.7
	Var Int User_ThrowPower;
	Var Int User_Blastspan;
	DamageType "Patriarch"
	Scale 0.3
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar("User_ThrowPower",8) //Initial, additional power.
		TNT1 A 0 A_ChangeVelocity(0, 0, 1.0, CVF_RELATIVE)
	SetCycle:
		TNT1 A 0 A_TakeFromTarget("TossPower",1) //Takes the token it generated during the hold.
		TNT1 A 0 A_SetUserVar("User_ThrowPower", User_ThrowPower + random(2,3)) //Add the throwing power.
		TNT1 A 0 A_JumpIfInTargetInventory("TossPower",1,"SetCycle") //Do we still have any tokens? If so, repeat the process!
		TNT1 A 0 A_JumpIfInTargetInventory("PowerStrength2",1,"SuperThrow") //In case of strength increase, let's make it fly at lightning speed, heh.
		Goto ApplyPower
	SuperThrow:
		TNT1 A 0 A_SetUserVar("User_ThrowPower", User_ThrowPower + 8)
	ApplyPower: //Let's add the extra speed to it
		TNT1 A 0 A_ScaleVelocity(Speed + (User_ThrowPower / 2))
		//TNT1 A 0 A_JumpIf(User_ThrowPower > 32, "ImpactBlast")
		Goto Main
	ImpactBlast:
		TNT1 A 0 A_ChangeFlag("BOUNCEONWALLS",0)
		TNT1 A 0 A_ChangeFlag("BOUNCEONCEILINGS",0)
		TNT1 A 0 A_ChangeFlag("BOUNCEONFLOORS",0)
	Main:
		//TNT1 A 0 A_JumpIf(sqrt((velX * velX) + (velY * velY) + (velZ * velZ)) < 1.5, "HoldStill")
		PBMB A 1 A_JumpIfInTargetInventory("SpikebombTrigger",1,"Detonate")
		Loop
	/*HoldStill:
		TNT1 A 0 A_Stop
		TNTP A 0 A_ChangeFlag("FLOORCLIP",0)
	Main2:
		PBMB A 0 A_FaceTarget
		PBMB A 1 A_JumpIfInTargetInventory("SpikebombTrigger",1,"Detonate")
		Loop*/
	Death:
		TNT1 A 0 A_SpawnItemEx("SpikebombProjectileFloor",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS)
		Stop
	//XDeath:
	Detonate:
		TNT1 A 0 {
			if(A_JumpIf(CountInv("MasterExploder", AAPTR_TARGET) > 0, "Null"))
			{
				A_SetDamageType("MasteringExplosions");
			}
			A_Stop;
			A_ChangeFlag("NOGRAVITY",1);
			A_ChangeFlag("NOINTERACTION",1);
		}
		TNT1 A 0 A_JumpIfInTargetInventory("PipeMode",1,2)
		TNT1 A 0 A_Jump(256,2)
		PBMB A 47 A_SpawnItemEx("SpikebombImplosion",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS)
			
		TNT1 A 0 {
			A_SetUserVar("User_Blastspan",14);
			
			A_PlaySound("Spikebomb/Explosion",5,0.9);
			A_PlaySound("Spikebomb/Add",7);
			A_PlaySound("Spikebomb/Far",6,0.8);
			
			A_SpawnItemEx("SpikebombBurst",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("SpipeMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
			
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN);
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			
			A_Explode(250,364,0,1);
			A_Explode(150,256,1,1);
		}
	DeathLoop:
		TNT1 A 0 A_SetUserVar("User_Blastspan",User_Blastspan - 1)
		TNT1 A 4 { A_Explode(20,364,0,1); A_Explode(10,256,1,1); }
		TNT1 A 0 A_JumpIf(User_Blastspan <= 0, 1)
		Loop
		TNT1 A 6
		Stop
	}
}

Actor SpikebombProjectile2 : SpikebombProjectile
{
	States
	{
	Death:
		TNT1 A 0
		Goto Detonate
	}
}

Actor SpikebombProjectileFloor : SpikebombProjectile
{
	BounceSound ""
	+THRUACTORS
	-NOBLOCKMAP
	-BOUNCEONFLOORS
	+NOEXPLODEFLOOR
	BounceType "None"
	States
	{
	Spawn:
		PBMB A 1 NoDelay A_JumpIf(CallACS("TargetDistance3D", radius, height), "ReturnTheBomb")
		PBMB A 0 A_JumpIfInTargetInventory("SpikebombTrigger",1,"Detonate")
		Loop
	ReturnTheBomb:
		PBMB A 1
		PBMB A 0 A_JumpIfInTargetInventory("SpikebombAmmo",0,"Spawn")
		PBMB A 0 A_SpawnItemEx("SpikebombAmmo")
		Stop
	Death:
		TNT1 A 0
		Goto Detonate
	}
}

Actor SpikebombBurst
{
	+NOINTERACTION
	var int User_Seq;
	States
	{
	Spawn:
		TNT1 A 4 NoDelay A_SetUserVar("User_Seq", 12)
	Looplet:
		TNT1 A 0 A_SpawnItemEx("SpikebombBomb",frandom(5.0,-5.0),frandom(5.0,-5.0),frandom(5.0,-5.0),frandom(5.0,9.0),frandom(5.0,9.0),frandom(8.0,15.0),frandom(0.0,360.0),SXF_TRANSFERPOINTERS)
		TNT1 A 0 A_SetUserVar("User_Seq", User_Seq - 1)
		TNT1 A 0 A_JumpIf(User_Seq  <= 0, "Null")
		Loop
	}
}

Actor SpikebombBomb
{
	Radius 11
	Height 7
	Speed 30
	Damage 20
	var int User_Smoking;
	Gravity 0.8
	Scale 0.15
	Projectile
	-NOGRAVITY
	DamageType "Patriarch"
	States
	{
	Spawn:
		//TNT1 A 0 A_SetUserVar("User_Smoking",2)
	Looplo:
		PSBM ABCDE 2 A_SpawnItemEx("Patriarch_Trail",frandom(-2, 2),
									frandom(-2, 2), frandom(-2, 2),
									frandom(1.5, -2.5), frandom(-1.0, 1.0),
									frandom(-1.0, 1.0), 0, SXF_CLIENTSIDE, 10)
		//TNT1 A 0 A_SetUserVar("User_Smoking", User_Smoking - 1)
		//TNT1 A 0 A_JumpIf(User_Smoking <= 0, "Looplo2")								
		Loop
	Looplo2:
		PSBM ABCDE 2			
		Loop
	Death:
		TNT1 A 28 {
			if(A_JumpIf(CountInv("MasterExploder", AAPTR_TARGET) > 0, "Null"))
			{
				A_SetDamageType("MasteringExplosions");
			}
			A_PlaySound("Explosion/Init",5,0.6);
			A_PlaySound("Explosion/Main",6,0.6);
			A_PlaySound("Explosion/Layer",4,0.6);
			A_PlaySound("Explosion/Flavor",7,0.6);
			A_SpawnItemEx("Patriarch_Main",0,0,0,0,0,0,SXF_CLIENTSIDE|SXF_TRANSFERPOINTERS,0);
			A_Explode(175,148);
			A_QuakeEx(3,3,3,12,0,512,"none",QF_SCALEDOWN);
		}
		Stop
	}
}

Actor SpipeBase
{ 
    +NOINTERACTION
	+NOTONAUTOMAP
	+FORCEXYBILLBOARD
	Alpha 0.0
	Scale 0.0
}

Actor SpipeFX : SpipeBase
{ 
	States
	{
	Spawn:
		TNT1 A 75
		Stop
	}
}

Actor SpipeSmoke : SpipeBase
{
	RenderStyle Translucent
	States
	{
	Spawn:
		TNT1 A random(12,17)
		TNT1 A 0 //NoDelay A_ScaleVelocity(frandom(0.8,1.1))
	SetupSprite:
		TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD")
	SpriteA:
		DYMI A 0
		Goto SetupScale
	SpriteB:
		DYMI B 0
		Goto SetupScale
	SpriteC:
		DYMI C 0
		Goto SetupScale
	SpriteD:
		DYMI D 0
		Goto SetupScale
	SetupScale:
		"####" "#" 0 A_SetScale(frandom(0.9, 1.1))
	FadeIn:
		"####" "#" 1 A_FadeIn(frandom(0.01, 0.04))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.01, 0.02))
		"####" "#" 0 A_JumpIf(Alpha >= 0.4, "Inter")
		Loop
	Inter:
		"####" "#" 0 A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.01, 0.02))
		"####" "#" 1 A_Jump(24,"FadeOut")
		Loop
	FadeOut:
		"####" "#" 1 A_FadeOut(frandom(0.01,0.02))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.01, 0.02))
		Loop
	}
}

Actor SpipeCloud : SpipeBase
{
	RenderStyle Add
	States
	{
	Spawn:
		TNT1 A 0
	SetupSprite:
		TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
		"SpriteE", "SpriteF", "SpriteG", "SpriteH")
	SpriteA:
		CLOD A 0
		Goto SetupScale
	SpriteB:
		CLOD B 0
		Goto SetupScale
	SpriteC:
		CLOD C 0
		Goto SetupScale
	SpriteD:
		CLOD D 0
		Goto SetupScale
	SpriteE:
		CLOD E 0
		Goto SetupScale
	SpriteF:
		CLOD F 0
		Goto SetupScale
	SpriteG:
		CLOD G 0
		Goto SetupScale
	SpriteH:
		CLOD H 0
		Goto SetupScale
	SetupScale:
		"####" "#" 0 A_SetScale(frandom(1.2, 1.65))
	FadeIn:
		"####" "#" 1 A_FadeIn(frandom(0.15, 0.1))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.01, 0.025))
		"####" "#" 0 A_JumpIf(Alpha >= 0.8, "FadeOut")
		Loop
	FadeOut:
		"####" "#" 1 A_FadeOut(frandom(0.05,0.02))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.025, 0.05))
		Loop
	}
}

Actor SpipeBlast : SpipeBase
{
	RenderStyle Add
	States
	{
	Spawn:
		TNT1 A 0
	SetupSprite:
		TNT1 A 0 A_Jump(255, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
		"SpriteE", "SpriteF", "SpriteG", "SpriteH")
	SpriteA:
		BLAS A 0
		Goto SetupScale
	SpriteB:
		BLAS B 0
		Goto SetupScale
	SpriteC:
		BLAS C 0
		Goto SetupScale
	SpriteD:
		BLAS D 0
		Goto SetupScale
	SpriteE:
		BLAS E 0
		Goto SetupScale
	SpriteF:
		BLAS F 0
		Goto SetupScale
	SpriteG:
		BLAS G 0
		Goto SetupScale
	SpriteH:
		BLAS H 0
		Goto SetupScale
	SetupScale:
		"####" "#" 0 A_SetScale(frandom(1.2, 1.65))
	FadeIn:
		"####" "#" 1 A_FadeIn(frandom(0.15, 0.1))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.02, 0.01))
		"####" "#" 0 A_JumpIf(Alpha >= 0.8, "FadeOut")
		Loop
	FadeOut:
		"####" "#" 1 A_FadeOut(frandom(0.05,0.02))
		"####" "#" 0 A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0)
		"####" "#" 0 A_SetScale(ScaleX + frandom(0.02, 0.01))
		Loop
	}
}

Actor SpipeEmber : SpipeBase
{
	RenderStyle Add
	States
	{
	Spawn:
		TNT1 A 0
	SetupSprite:
		TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
		"SpriteE", "SpriteF")
	SpriteA:
		EMBR A 0
		Goto SetupScale
	SpriteB:
		EMBR B 0
		Goto SetupScale
	SpriteC:
		EMBR C 0
		Goto SetupScale
	SpriteD:
		EMBR D 0
		Goto SetupScale
	SpriteE:
		EMBR E 0
		Goto SetupScale
	SpriteF:
		EMBR F 0
		Goto SetupScale
	SetupScale:
		"####" "#" 0 A_SetScale(frandom(0.04, 0.1))
	FadeIn:
		"####" "#" 1 A_FadeIn(frandom(0.99, 0.9))
	Intern:
		"####" "#" 3 Bright A_Jump(200, "FadeOut")
		Loop
	FadeOut:
		"####" "#" 1 A_Weave(frandom(0.9, 1.0), frandom(0.9, 1.0),
					frandom(70, 90), frandom(70, 90))
		"####" "#" 0 A_JumpIf(ScaleX <= 0.0, "NULL")
		"####" "#" 0 A_ChangeVelocity(VelX * frandom(0.93, 0.99),
					  VelY * frandom(0.93, 0.99),
					  VelZ - frandom(0.1, 0.2),
					  CVF_REPLACE)
		"####" "#" 0 A_SetScale(ScaleX - frandom(0.002, 0.001))
		Loop
	}
}

Actor SpipeShockwave : SpipeBase
{
	RenderStyle Add
	Alpha 0.99
	Scale 0.9
	States
	{
	Spawn:
		SHCK A 0
		SHCK A 0 A_SetScale(ScaleX + frandom(0.12, 0.09))
		SHCK A 1 Bright A_FadeOut(frandom(0.02,0.05))
		Loop
	}
}

Actor SpipeFlare : SpipeBase
{
	RenderStyle Add
	Alpha 0.99
	Scale 7.5
	States
	{
	Spawn:
		FLER A 1 Bright A_FadeOut(0.02)
		FLER A 0 A_SetScale(ScaleX - frandom(0.05, 0.15))
		FLER A 0 A_JumpIf(ScaleX <= 0.0, "NULL")
		Loop
	}
}

Actor SpipeExplosionMain : SpipeBase
{
	Var Int User_Counter;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar("User_Counter", 30)
		Goto Emit
	Emit:
		TNT1 A 0 A_SpawnItemEx("SpipeCloud", frandom(-45.0, 45.0),
					frandom(-45.0, 45.0), frandom(-45.0, 45.0),
					frandom(1.0, 3.5), 0,
					frandom(-1.0, 4.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 60)
		TNT1 A 0 A_SpawnItemEx("SpipeBlast", frandom(-45.0, 45.0),
					frandom(-45.0, 45.0), frandom(-45.0, 45.0),
					frandom(1.0, 3.5), 0,
					frandom(-2.0, 2.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 60)		
	    TNT1 A 0 A_JumpIf(GetCvar("TB_SmokeReduction")==2, 2)	
		TNT1 A 0 A_SpawnItemEx("SpipeSmoke", frandom(-45.0, 45.0),
					frandom(-45.0, 45.0), frandom(-45.0, 45.0),
					frandom(0.5, 2.5), 0,
					frandom(-2.0, 2.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 100)
		TNT1 AA 0 A_SpawnItemEx("SpipeEmber", frandom(-35.0, 35.0),
					frandom(-35.0, 35.0), frandom(-45.0, 45.0),
					frandom(5.0, 17.0), 0,
					frandom(2.0, 9.0), frandom(0.0,360.0), SXF_CLIENTSIDE, 40)
		TNT1 A 1
		TNT1 A 0 A_SetUserVar("User_Counter", User_Counter - 1)
		TNT1 A 0 A_JumpIf(User_Counter <= 0,"NULL")
		Loop
	}
}

Actor SpipeMain : SpipeBase
{
	States
	{
	Spawn:
	TNT1 A 0 NoDelay A_SpawnItemEx("SpipeExplosionMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0)
	TNT1 A 0 A_SpawnItemEx("SpipeFlare",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0)
	TNT1 A 0 A_SpawnItemEx("SpipeShockwave",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0)
	TNT1 A 0 A_SpawnItemEx("SpipeFX",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0)
	Stop
	}
}

//Upgraded
Actor SpikebombImplosion
{
	Projectile
	+NOINTERACTION
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_PlaySound("Spikebomb/Implosion")
		TNT1 A 0 A_AlertMonsters
		TNT1 A 0 A_SpawnItemEx("SpipeImplosionDuster",0,0,0,0,0,0,0,SXF_CLIENTSIDE)
		TNT1 A 0 A_SpawnItemEx("SpipeImplosionRing",0,0,0,0,0,0,0,SXF_CLIENTSIDE)
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 1 A_RadiusThrust(-700,640,RTF_NOIMPACTDAMAGE|RTF_THRUSTZ)
		Stop
	}
}

Actor SpipeImplosionRing
{
	Renderstyle Add
	+NOINTERACTION
	Alpha 0.0
	States
	{
	Spawn:
		SHCK B 0 NoDelay A_SetScale(3.5)
	Enter:
		SHCK B 0 A_SetScale(ScaleX - 0.015)
		SHCK B 1 A_FadeIn(0.017)
		SHCK B 0 A_JumpIf(Alpha >= 0.7, "Main")
		Loop
	Main:
		SHCK B 0 A_JumpIf(ScaleX <= 0.5, "Null")
		SHCK B 0 A_SetScale(ScaleX - 0.35)
		SHCK B 1 A_FadeOut(0.05)
		Loop
	}
}

Actor SpipeImplosionDuster
{
	var int User_Counter;
	+NOINTERACTION
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar("User_Counter", 30)
	Main:
		TNT1 A 0 A_SetUserVar("User_Counter", User_Counter - 1)
		TNT1 AAAAAAAA 0 A_SpawnItemEx("SpipeImplosionDust",frandom(5.0,-5.0),frandom(5.0,-5.0),frandom(5.0,-5.0),frandom(25.0,20.0),frandom(25.0,20.0),random(frandom(35.0,20.0),frandom(-35.0,-20.0)),frandom(0.0,360.0),SXF_CLIENTSIDE,64)
		TNT1 A 1 A_JumpIf(User_Counter <= 0, "Null")
		Loop
	}
}

Actor SpipeImplosionDust
{
	Renderstyle Add
	+NOINTERACTION
	Alpha 0.0
	States
	{
	Spawn:
		"####" "#" random(5,7) NoDelay A_SetScale(frandom(0.2,0.35))
	ReverseSetup:
		"####" "#" 0 A_ScaleVelocity(-0.18)
		"####" "#" 0 A_Jump(256,"FrameE","FrameF","FrameG","FrameH")
	FrameE:
		DYMI E 0 A_Jump(256,"FadeIn")
	FrameF:
		DYMI F 0 A_Jump(256,"FadeIn")
	FrameG:
		DYMI G 0 A_Jump(256,"FadeIn")
	FrameH:
		DYMI H 0 A_Jump(256,"FadeIn")
	FadeIn:
		"####" "#" 1 A_FadeIn(frandom(0.01,0.02))
		"####" "#" 0 A_SetScale(ScaleX - 0.005)
		"####" "#" 0 A_JumpIf(ScaleX <= 0, "Null")
		"####" "#" 0 A_JumpIf(Alpha >= 0.25, "FadeOut")
		Loop
	FadeOut:
		"####" "#" 1 A_FadeOut(frandom(0.01,0.02))
		"####" "#" 0 A_SetScale(ScaleX - 0.005)
		"####" "#" 0 A_JumpIf(ScaleX <= 0, "Null")
		Loop
	}
}