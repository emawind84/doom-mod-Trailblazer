class Trailblazer : PlayerPawn
{
	double aircontrol;
	int jumpwaittime, jumpboosttime, boosttics;
	double jumpvelscale, jumpvellimit, jumpvelcontrol, jumpvelpenal;
	
	property AirControl: aircontrol;
	property JumpWaitTime: jumpwaittime;
	property JumpBoostTime: jumpboosttime;
	property JumpSpeedScale: jumpvelscale;
	property JumpSpeedLimit: jumpvellimit;
	property JumpSpeedControl: jumpvelcontrol;
	property JumpSpeedPenalty: jumpvelpenal;
	
	tb_Swagger view_tilt; // View tilt control.
	
	Default
	{
		Health 100;
		Player.maxhealth 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Player.SoundClass "Trailblazer";
		Player.forwardmove 1;//.25
		Player.sidemove 1;//.25
		Player.JumpZ 9.0;
		Player.GruntSpeed 16.0;
		Player.DisplayName "Malcolm";
		Player.Face "BAD";
		Player.ColorRange 112, 127;
		Player.AttackZOffset 13;
		
		// Custom properties. Set to defaults for now.
		Trailblazer.AirControl 0.4; // 0.00390625 is default Doom air control.
		Trailblazer.JumpWaitTime 7; // In tics. Default 18.
		Trailblazer.JumpBoostTime 4; // Horizontal boost time after jumping, in tics.
		Trailblazer.JumpSpeedScale 0.9; // Scales horizontal movement speed while jumping.
		Trailblazer.JumpSpeedLimit 50.0; // The upper limit for boost velocity. If speed is higher than this, no boost occurs. Default Doomguy can hit circa ~21 velocity on an axis while straferunning.
		//Trailblazer.JumpSpeedCurve 8.0; // The greater the number, the harsher the curve on which the player gains horizontal speed midair (a.k.a. the slower he gains speed.)
		Trailblazer.JumpSpeedControl 2.0; // Amount of velocity added to normal movement for mid-air control after a jump.
		Trailblazer.JumpSpeedPenalty 0.999; // Total velocity is slowed by this much when Boost tics run out and the player is below the speed limit. Above the speed limit, we are slowed by air control's magic formula.
		
		Player.ColorSet 0, "Classic", 240, 247, 207;
		Player.ColorSet 1, "Ashtray", 96, 111, 103;
		Player.ColorSet 2, "Redscale", 176, 191, 176;
		Player.ColorSet 3, "Manly-ass", 250, 254, 251;

		Player.StartItem 'Sidekick';
		Player.StartItem 'BulletAmmo', 60;
		//Player.StartItem 'CustomPain'; // THIS DOES NOT WORK FOR NO APPARENT REASON, AAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH~
		Player.StartItem 'Macheterang';
		Player.StartItem 'SpikebombWeapon';
		Player.StartItem 'SpikebombTossWeapon';
		Player.StartItem 'PipeQuickToss';
		Player.StartItem 'TinkerItem';
		Player.StartItem 'AmmoCrafterItem';
		
		//Player.StartItem 'HammerSpaceCounter', 10; // obsolete.
		
		//Machete Quick-Toss stuff
		Player.StartItem 'MacheteIn';
		Player.StartItem 'MacheteOut';
		
		//Hexen stuff
		Player.SpawnClass "Any";
		Player.StartItem 'Sidekick';
		Player.StartItem 'BlueMana', 60;
		
		//Gun clips
		Player.StartItem 'MacheteAmmo', 1;
		Player.StartItem 'CradleClip', 6;
		Player.StartItem 'GraveClip', 6;
		Player.StartItem 'UziClipLeft', 30;
		Player.StartItem 'UziClipRight', 30;
		Player.StartItem 'MagnumClip', 6;
		Player.StartItem 'SidekickClip', 16;
		Player.StartItem 'ChromeJusticeClip', 8;
		Player.StartItem 'FMGClip', 70;
		Player.StartItem 'PatriarchClip', 12;
		Player.StartItem 'DoubleDeuceClip', 2;
		
		Player.WeaponSlot 1, "SpikebombWeapon", "Macheterang";
		Player.WeaponSlot 2, "Sidekick", "Colts";
		Player.WeaponSlot 3, "Fleshrend", "Eliminator", "ChromeJustice";
		Player.WeaponSlot 4, "FMG", "Leadspitter";
		Player.WeaponSlot 5, "Patriarch", "Bitchmaker";
		Player.WeaponSlot 6, "Paintrain", "Skullthrottle", "Skullthrottle2";
		Player.WeaponSlot 7, "Nutcracker", "DoubleDeuce";
		Player.WeaponSlot 8, "Conqueror";
		
		+DONTBLAST //For future use, usually
		+THRUSPECIES
		
		Species "Chainsmoker";
		
		DamageFactor "Normal", 0.8; //Manly jacket and manly resistance!
		DamageFactor "Patriarch", 0.1; //He shouldn't get so damaged by his own gun, babe - too action hero'y for that!
		DamageFactor "MasteringExplosions", 0.0; //EXPLOSIVO!
	}
	
	// Stuff that should be handled immediately after existing.
	override void PostBeginPlay()
	{
		// Brotip: PostBeginPlay runs only when the player actor (or a voodoo doll) is created
		// (even on multiplayer respawn), not guaranteed once every map. If something needs to
		// be reinitialized every map, toss it into HandleItemReset().
		// (Yes, the Chillgrasp thinker's user is lost between map changes in multiplayer.)
		// Chillgrasp initialization is now done in OnRespawn.
	
		if (!player || !player.mo || player.mo != self || gamestate == GS_TITLELEVEL)
		{ // For voodoo dolls and titlemaps.
			Super.PostBeginPlay();
			return;
		}
		
		GiveInventory("CustomPain", 1);
		Super.PostBeginPlay();
	}
	
	// handled by event handler to reset stuff after every map switch.
	void HandlePlayerReset()
	{
		view_tilt.Init(player);
	}
	
	// what says on the tin.
	override void OnRespawn()
	{
		// Zhs2, probably: Fun fact: this function fires at the beginning of a game too.

		// kd: LET'S HEAD OVER THERE REALLY REALLY FAST. IF SOMETHING GETS IN OUR
		// WAY - SHOOT IT!
		
		view_tilt.Init(player);
		
		// player_data = VarStorage;
		super.onrespawn();
		return;
	}
	
	// stuff that should be handled every tic.
	override void Tick()
	{
		if (!player || !player.mo || player.mo != self || health <= 0)
		{ // My point with fucking voodoo dolls still stands.
			Super.Tick();
			return;
		}
		view_tilt.tick();		// kd: Don't rock the boat and keep on your swim vests!
		super.tick();
	}
	
	// view tilt stuff.
	vector2 weapon_bob_offset;
	vector2 old_weapon_bob_offset;
	double old_delta_view;
	double delta_view;
	
	States
	{
	Spawn:
		BLAZ A -1;
		Stop;
 	 See:
 		BLAZ A 0 A_SpawnItemEx("TrailblazerStep", 0, 0, 0, 0, 0, -10, 0, SXF_SETMASTER, 0);
		BLAZ AB 5;
 		BLAZ A 0 A_SpawnItemEx("TrailblazerStep", 0, 0, 0, 0, 0, -10, 0, SXF_SETMASTER, 0);
		BLAZ CD 5;
		Goto Spawn;
	Melee:
		BLAZ F 6 Bright;
		Goto Missile;
	Missile:
		BLAZ E 12;
		Goto Spawn;
	Pain:
		BLAZ G 3;
		BLAZ G 3 A_Pain;
		Goto Spawn;
	Death:
	AltSkinDeath:
		BLAZ H 5;
		BLAZ I 5 A_PlayerScream;
		BLAZ J 5 A_NoBlocking;
		BLAZ K 5;
		BLAZ L -1;
		Stop;
	XDeath:
	AltSkinXDeath:
		BLAZ O 5;
		BLAZ P 5 A_PlayerScream;
		BLAZ Q 5 A_NoBlocking;
		BLAZ RSTUV 5;
		BLAZ W -1;
		Stop;
	}
}

// Custom damage multipliers, woo
class CustomPain : Inventory
{
	Default
	{
		+INVENTORY.UNTOSSABLE
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		// Attack damage
		if(!passive && damage > 0)
		{
			newdamage = damage * GetCvar("TB_PlayerAttackMult");
		}
		// Defense damage
		if(passive && damage > 0)
		{
			newdamage = damage * GetCvar("TB_PlayerDefenseMult");
		}
	}
}

class TrailblazerStep : actor
{
	Default
	{
		PROJECTILE;
		+NOBLOOD;
		+DONTBLAST;
		damage 0;
		radius 10;
		deathsound "Move/Step";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class DashMaster : PowerupGiver
{
	Default
	{
		Inventory.MaxAmount 0;
		Powerup.Type "PowerInvincibilityFrames";
		Powerup.Color "None";
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
}

class PowerInvincibilityFrames : PowerProtection
{
	Default
	{
		Powerup.Duration 15;
		DamageFactor "Normal", 0.2;
	}
	
	/*override void AttachToOwner(Actor user)
	{
		user.bNoDamage = TRUE;
		user.bNoPain = TRUE;
		Super.AttachToOwner(user);
		return;
	}
	
	override void DetachFromOwner()
	{
		owner.bNoDamage = FALSE;
		owner.bNoPain = FALSE;
		Super.DetachFromOwner();
		return;
	}*/
}