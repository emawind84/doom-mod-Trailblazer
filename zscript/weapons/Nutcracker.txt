class NutterSelected : Inventory { Default { Inventory.MaxAmount 1; } }
class NutterUpgrade : Inventory  { Default { Inventory.MaxAmount 1; } }
class GloryShotTimer : Inventory { Default { Inventory.MaxAmount 30; } }

class NutcrackerPickup : CustomInventory
{
	Default
	{
		Inventory.PickupSound "misc/w_pkup";
		//Inventory.PickupMessage "Obtained a really damn stylish ''Fleshrend'' sawed-off! Peeling off the skins - multiple enemies at a time! (3)";
	}
	
	States
	{
	Spawn:
		NTCG X -1;
		Stop;
	Pickup:
		TNT1 A 0 {
			if (FindInventory("Nutcracker") == NULL) A_GiveInventory("Nutcracker");
			//else A_GiveInventory("Nutcracker2");
		}
		Stop;
	}
}

//class Nutcracker2 : Nutcracker {}

class Nutcracker : TrailblazerWeapon //replaces BFG9000
{
	Default
	{
		Health 3;
		Weapon.AmmoUse 1;
		Weapon.AmmoType "TwoBoreAmmo";
		Weapon.AmmoUse2 3;
		Weapon.AmmoType2 "TwoBoreAmmo";
		Weapon.AmmoGive 2;
		Weapon.SlotNumber 7;
		Weapon.SelectionOrder 3;
		Weapon.UpSound "Nutcracker/Up";
		Weapon.Kickback 90;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Got the glorious Van Masterson's ''Nutcracker'' T-Rex rifle! Have you seen any T-Rexes around these days? Me neither! (7)";
		Obituary "%o landed on the wrong side of %k's ''Nutcracker'' barrel.";
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 1.4;
		Weapon.BobRangeY 0.5;
		Weapon.BobRangeX 1.1;
		+WEAPON.NOALERT
		+WEAPON.NOAUTOAIM
	}
	
	//Hexen handling.
	override Void AttachToOwner (actor user) {
		if(gameinfo.gametype == Game_HEXEN) {
			AmmoUse1 = 60;
			AmmoGive1 = 60;
			AmmoType1 = "BlueMana";
			AmmoUse2 = 60;
			AmmoGive2 = 60;
			AmmoType2 = "GreenMana";
			bPRIMARY_USES_BOTH = 1;
			bALT_USES_BOTH = 1;
		}
		Super.AttachToOwner(user);
	}

	States
	{
	Ready:
		NTFU A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCU A 0;
		"####" ABCD 1;
	ReadyMain:
		NTFG A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCG A 0;
		"####" A 0 A_JumpIf(CountInv("MacheteAmmo") && CountInv("MacheteGoesFast"),"CaberToss");
		"####" A 1 A_WeaponReady(WRF_ALLOWZOOM);
		Loop;
	Deselect:
		TNT1 A 0 {
			A_TakeInventory("NutterSelected");
			A_TakeInventory("PowerCrafterTimer");
		}
		NTFU A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCU A 0;
		"####" DCBA 1;
		TNT1 A 0 A_StopSound(1);
		TNT1 A 0 SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		TNT1 A 1 A_Lower(18);
		Wait;
	Select:
		TNT1 A 0 A_GiveInventory("NutterSelected");
		TNT1 A 0 SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
	HonkaCzongka:
		TNT1 A 1 A_Raise(12);
		Loop;
	Fire:
		NTCG A 0 {
			A_PlaySound("Nutcracker/Fire",CHAN_WEAPON,0.7);
			if(GetCvar("TB_SmokeReduction") < 2) {
			For(int Smokescreen = 0; Smokescreen < 10; Smokescreen++) {
				A_FireProjectile("Gunsmoke_Large_Dark",frandom(-15.0,15.0),0,13,-5,FPF_NOAUTOAIM,frandom(-10.0,10.0));
			}
			}
			if(GetCvar("TB_SmokeReduction") < 1) {
			For(int Smokescreen = 0; Smokescreen < 10; Smokescreen++) {
				A_FireProjectile("Gunsmoke_Large_Dark",frandom(-15.0,15.0),0,13,-5,FPF_NOAUTOAIM,frandom(-10.0,10.0));
			}
			}
			//A_FireProjectile("GunsmokeSpawner_Large_Dark",0,0,13,0,FPF_NOAUTOAIM);
			A_ChangeVelocity (-39, 0, 0, CVF_RELATIVETOWEAPON);
			A_Recoil(20.0);
			A_AlertMonsters();
			A_GunFlash();
		}
		NTCG A 0 A_JumpIfInventory("NutForceOne",1,"AviatorLoveMachine");
		Goto FireContinue;
	AviatorLoveMachine:
		NTCG A 0 {
			A_PlaySound("Nutcracker/Airforce",CHAN_AUTO,0.6);
			A_FireProjectile("NutcrackerMinorBullet",-5.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerMinorBullet",-10.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerMinorBullet",5.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerMinorBullet",10.0,0,6,-5,FPF_NOAUTOAIM);
		}
	FireContinue:
		NTCG A 0 {
			A_FireProjectile("NutcrackerBullet",0,1,6,-5,FPF_NOAUTOAIM);
			A_SetBlend("Yellow",0.2,12);
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
				A_SetBlend("Blue",0.2,35);
			}
			A_QuakeEx(6,6,6,14,0,16,"none",QF_SCALEDOWN);
			A_SetAngle(Angle-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		NTFF A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCF A 0;
		"####" A 1 Bright {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.9); }
			A_SetAngle(Angle-4.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-4.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" B 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.8); }
			A_SetAngle(Angle-3.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-3.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" B 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.85); }
			A_SetAngle(Angle-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" C 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.875); }
			A_SetAngle(Angle-2.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" D 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.9); }
			A_SetAngle(Angle-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" E 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.925); }
			A_SetAngle(Angle-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" F 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.95); }
			A_SetAngle(Angle-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" G 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.96); }
			A_SetAngle(Angle-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.97); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.98); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.99); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(1.0); } }
		TNT1 A 5 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		TNT1 A 5 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		TNT1 A 5 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		TNT1 A 0 A_JumpIfNoAmmo("Ready");
		
		NTFB A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCB A 0;
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" BCD 1;
		"####" E 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" FGH 1;
		"####" I 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" JKL 1;
		"####" M 0 A_PlaySound("Nutcracker/Load",CHAN_AUTO,0.8);
		"####" M 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" NOP 1;
		"####" Q 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" R 1;
		
		NTFL A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCL A 0;
		"####" AB 1;
		"####" C 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" DEF 1;
		"####" G 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" HIK 1;
		"####" A 0 A_PlaySound("Nutcracker/Pull",CHAN_AUTO,1.0);
		"####" L 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" MNO 1;
		"####" P 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),4);
		
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" A 1;
		
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" BC 1;
		"####" D 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" EF 1;
		
		NTFG A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCG A 0;
		"####" A 5;
		Goto ReadyMain;
	AltFire:
		NTCG A 0 A_JumpIfInventory("NutterUpgrade",1,1);
		Goto ReadyMain;
		NTCG A 0 A_JumpIf(CountInv("PowerTimeFreezer") || CountInv("GloryShotTimer"), "ReadyMain");
		NTCG A 0 {
			A_PlaySound("Nutcracker/Alt",CHAN_WEAPON|CHAN_NOPAUSE,1.0,0,ATTN_NONE);
			if(GetCvar("TB_SmokeReduction") < 2) {
			For(int Smokescreen = 0; Smokescreen < 10; Smokescreen++) {
				A_FireProjectile("Gunsmoke_Large_Dark",frandom(-15.0,15.0),0,13,-5,FPF_NOAUTOAIM,frandom(-10.0,10.0));
			}
			}
			if(GetCvar("TB_SmokeReduction") < 1) {
			For(int Smokescreen = 0; Smokescreen < 10; Smokescreen++) {
				A_FireProjectile("Gunsmoke_Large_Dark",frandom(-15.0,15.0),0,13,-5,FPF_NOAUTOAIM,frandom(-10.0,10.0));
			}
			}
			//A_FireProjectile("GunsmokeSpawner_Large_Dark",0,0,13,-5,FPF_NOAUTOAIM);
			A_ChangeVelocity (-39, 0, 0,CVF_RELATIVETOWEAPON);
			A_Recoil(20.0);
			A_AlertMonsters();
			A_GunFlash();
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO|CHAN_NOPAUSE);
			}
		}
		NTCG A 0 A_JumpIfInventory("NutForceOne",1,"HereComesFreedomination");
		Goto AltFireContinue;
	HereComesFreedomination:
		NTCG A 0 {
			A_FireProjectile("NutcrackerSlowBullet",-5.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerSlowBullet",-10.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerSlowBullet",5.0,0,6,-5,FPF_NOAUTOAIM);
			A_FireProjectile("NutcrackerSlowBullet",10.0,0,6,-5,FPF_NOAUTOAIM);
		}
	AltFireContinue:
		NTCG A 0 {
			A_FireProjectile("NutcrackerGloryShot",0,1,6,-5,FPF_NOAUTOAIM);
			A_SetBlend("White",0.4,105);
			A_Quake(6,14,0,16,"none");
			A_SetAngle(Angle-2.5 * GetCvar("TB_WeaponRecoil"),SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.5 * GetCvar("TB_WeaponRecoil"),SPF_INTERPOLATE);
		}
	
		NTFF A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCF A 0;
		"####" A 1 Bright {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.9); }
			A_SetAngle(Angle-4.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-4.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" B 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.8); }
			A_SetAngle(Angle-3.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-3.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" B 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.85); }
			A_SetAngle(Angle-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" C 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.875); }
			A_SetAngle(Angle-2.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-2.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" D 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.9); }
			A_SetAngle(Angle-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" E 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.925); }
			A_SetAngle(Angle-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" F 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.95); }
			A_SetAngle(Angle-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		"####" G 1 {
			if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.96); }
			A_SetAngle(Angle-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.97); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.98); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(0.99); } }
		TNT1 A 1 { if(GetCvar("TB_ZoomFactor")) { A_ZoomFactor(1.0); } }
		TNT1 A 5 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		TNT1 A 5 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		TNT1 A 5 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		TNT1 A 0 A_JumpIfNoAmmo("Ready");
	
		NTFB A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCB A 0;
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" BCD 1;
		"####" E 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" FGH 1;
		"####" I 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" JKL 1;
		"####" M 0 A_PlaySound("Nutcracker/Load",CHAN_AUTO,0.8);
		"####" M 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" NOP 1;
		"####" Q 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" R 1;
		
		NTFL A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCL A 0;
		"####" AB 1;
		"####" C 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" DEF 1;
		"####" G 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" HIK 1;
		"####" L 0 A_PlaySound("Nutcracker/Pull",CHAN_AUTO,1.0);
		"####" L 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" MNO 1;
		"####" P 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),4);
		
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" A 1;
		
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" BC 1;
		"####" D 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" EF 1;
		
		NTFG A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCG A 0;
		"####" A 5;
		Goto ReadyMain;
	Flash:
		TNT1 A 3 A_Light2();
		TNT1 A 6 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;
	Zoom:
		"####" A 0 A_JumpIfInventory("ZoomReFire",1,"PunchHoes");
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" FDBA 1;
	PunchHoes:
		QML1 A 0 {
			A_Overlay(5,"PunchFlash");
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
			}
			A_PlaySound("Punch/Swing",CHAN_AUTO,1.0);
			Return A_JumpIf(!CountInv("PowerStrength2"),2);
		}
		FML1 A 0 {
			A_SetBlend("Orange",0.05,10);
			A_PlaySound("Melee/Firepunch",CHAN_AUTO);
		}
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" A 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" B 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" C 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" D 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerStrength2")) {
				A_CustomPunch(90, 1, 0, "FlamePunchCracker", 150 + (CountInv("KineticFist") ? 200 : 0),0.06);
			} Else {
				A_CustomPunch(30, 1, 0, "PunchCracker", 100 + (CountInv("KineticFist") ? 200 : 0));
			}
		}
	PunchContinue:
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" E 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" F 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" G 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" H 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" I 1;
		"####" J 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" K 1;
		TNT1 A 5;
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "PunchHoes");
		
		NTFH A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCH A 0;
		"####" ACEF 1;
		Goto ReadyMain;
	PunchFlash:
		NTFG D 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCG D 0;
		"####" D 1 A_PlaySound("Punch/Swing",CHAN_AUTO,1.0);
		
		NTUM A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCM A 0;
		"####" ABC 1;
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" BA 1;
		
		NTFG D 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCG D 0;
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" DD 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" DD 1;
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" DD 1;
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" DD 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" DD 1;
		Stop;
	CaberToss:
		NTFU A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCU A 0;
		"####" DCBA 1;
	CaberMain:
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 0 {
				A_PlaySound("Machete1/Slash",CHAN_WEAPON,0.9);
				A_PlaySound("Machete2/Slash",CHAN_AUTO,0.2);
				If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
			}
		}
		MCHT ABC 1;
		MCHT A 0 {
			A_TakeInventory("MacheteAmmo",1,TIF_NOTAKEINFINITE);
			If(CountInv("PowerStrength2")) {
				If(CountInv("PowerAmmoJunkie")) {
				A_SpawnItemEx("MacheterangBerserkProjectileJunkie",cos(-invoker.pitch)*48,0,32+(sin(-invoker.pitch)*48),cos(-invoker.pitch)*35,0,sin(-invoker.pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				} Else {
					A_SpawnItemEx("MacheterangBerserkProjectile",cos(-invoker.pitch)*48,0,32+(sin(-invoker.pitch)*48),cos(-invoker.pitch)*35,0,sin(-invoker.pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				}
			} Else {
				If(CountInv("PowerAmmoJunkie")) {
					A_SpawnItemEx("MacheterangProjectileJunkie",cos(-invoker.pitch)*48,0,32+(sin(-invoker.pitch)*48),cos(-invoker.pitch)*35,0,sin(-invoker.pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				} Else {
					A_SpawnItemEx("MacheterangProjectile",cos(-invoker.pitch)*48,0,32+(sin(-invoker.pitch)*48),cos(-invoker.pitch)*35,0,sin(-invoker.pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				}
			}
		}
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		MCHT E 1;
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		MCHT G 1;
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		MCHT I 1;
		TNT1 A 3;
		TNT1 A 0 A_JumpIf(CountInv("MacheteGoesFast") && CountInv("MacheteAmmo"), "CaberMain");

		NTFU A 0 A_JumpIfInventory("NutterUpgrade",1,2);
		NTCU A 0;
		"####" ABCD 1;
		Goto ReadyMain;
	Spawn:
		NTCG X -1;
		Stop;
	}
}

class NutcrackerBullet : FastProjectile
{
	Default
	{
		Radius 15;
		Height 12;
		MissileHeight 8;
		Speed 200;
		DamageFunction (20*random(1,5));
		Projectile;
		Renderstyle "Add";
		Obituary "%o had the very unfortunate accident of getting his nuts cracked by %k's ''Nutcracker''.";
		Scale 1;
		MissileType "NutcrackerTrail";
		Decal "NutcrackerChip";
		+NOGRAVITY
		+RIPPER
		+EXTREMEDEATH
		+GETOWNER
	}
	
	int User_Counter;
	
	States
	{
	Spawn:
		TRAC A 0 NoDelay A_PlaySound("Nutcracker/Fly",CHAN_AUTO,0.8,1);
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.15, CVF_RELATIVE);
		Wait;
	Death:
		TNT1 A 25 { 
			for(int Swagolino = 0; Swagolino < 40; Swagolino++) {
				A_SpawnItemEx("NutcrackerShatterBullet",0,0,0,frandom(125.0,100.0),0,-frandom(12.0,-12.0),frandom(0.0,360.0),SXF_TRANSFERPOINTERS,0);
			}
			A_PlaySound("Nutcracker/Hit",CHAN_AUTO,0.8);
			A_SpawnItemEx("NutcrackerPuff",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_QuakeEx(4,4,4,25,0,384,"none",QF_SCALEDOWN);
		}
		Stop;
	}
}

class NutcrackerShatterBullet : FastProjectile
{
	Default
	{
		Radius 11;
		Height 7;
		MissileHeight 8;
		Speed 125;
		DamageFunction (5*random(1,5));
		Renderstyle "Add";
		Obituary "%o was caught by %k's stray ''Nutcracker'' impact pellet.";
		Scale 0.5;
		MissileType ""; //"ThrottleTrail";
		Decal "BulletChip2";
		Projectile;
		+NOGRAVITY
		+BLOODLESSIMPACT
		+FORCERADIUSDMG
		+EXTREMEDEATH
	}
	
	States
	{
	Spawn:
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.4, CVF_RELATIVE);
		Loop;
	Death:
		TNT1 A 1 A_SpawnItemEx("BuellerPuff",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
	XDeath:
		TNT1 A 0 A_Explode(90,96,0);
		Stop;
	}
}

class NutcrackerMinorBullet : NutcrackerBullet
{
	Default
	{
		Radius 11;
		Height 7;
		MissileHeight 8;
		Speed 200;
		DamageFunction (5*random(1,5));
		Renderstyle "Add";
		Obituary "%o faced the most powerful of a bukkake - the Nut Force One.";
		MissileType "NutcrackerMinorTrail";
		Decal "NutcrackerMinorChip";
	}
	
	States
	{
	Spawn:
		TRAC A 0 NoDelay A_PlaySound("Nutcracker/Fly",CHAN_AUTO,0.8,1);
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.15, CVF_RELATIVE);
		Wait;
	Death:
		TNT1 A 25 {
			For(int BukkakeJones = 0; BukkakeJones < 10; BukkakeJones++) {
				A_SpawnItemEx("NutcrackerShatterBullet",0,0,0,frandom(125.0,100.0),0,-frandom(12.0,-12.0),frandom(0.0,360.0),SXF_TRANSFERPOINTERS);
			}
			A_PlaySound("Nutcracker/Hit",CHAN_AUTO,0.5);
			A_SpawnItemEx("NutcrackerPuff",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_QuakeEx(3,3,3,25,0,256,"none",QF_SCALEDOWN);
		}
		Stop;
	}
}

class NutcrackerTrail : Actor
{
	Default
	{
		Renderstyle "Add";
		Alpha 0.5;
		Scale 0.05;
		+NOINTERACTION
		+FORCERADIUSDMG
		+EXTREMEDEATH
	}
	
	States
	{
	Spawn:
		NTCT A 0 NoDelay A_Explode((50*random(1,5)),56,0);
	Looplet:
		NTCT A 1 Bright {
			A_FadeOut(frandom(0.15,0.2));
			A_SetScale(Scale.X+0.05);
		}
		Loop;
	}
}

class NutcrackerMinorTrail : NutcrackerTrail
{
	Default
	{
		Scale 0.04;
	}
	
	States
	{
	Spawn:
		NTCT A 0 NoDelay A_Explode((10*random(1,5)),32,0);
	Looplet:
		NTCT A 1 Bright {
			A_FadeOut(frandom(0.15,0.2));
			A_SetScale(Scale.X+0.02);
		}
		Loop;
	}
}

//The glory of Alt-Fire
class NutterReturn : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 0;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
	
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_SetBlend("Red",0.2,50);
		Stop;
	}
}

class NutcrackerGloryShot : NutcrackerBullet
{
	Default
	{
		Speed 5;
		MissileType "";
		Scale 1.2;
		Renderstyle "Normal";
		+NOTIMEFREEZE
		+SKYEXPLODE
		+FORCERADIUSDMG
	}
	
	int User_Trailer;
	
	States
	{
	Spawn:
		FREB A 0 NoDelay {
			ACS_NamedExecuteAlways("GloryStart");
			A_ChangeVelocity(0, 0, 0.1, CVF_RELATIVE);
			A_PlaySound("Nutcracker/Chariots",CHAN_5|CHAN_NOPAUSE,1.0,1,ATTN_NONE);
			A_GiveToTarget("NutcrackerTimeStop");
			User_Trailer = 0;
			User_Counter = 0;
		}
	Looplet:
		FREB A 1 {
			A_RadiusGive("NutcrackerGloryItem",1024,RGF_MONSTERS,1);
			A_SpawnItemEx("NutcrackerGloryParticler",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLIENTSIDE);
			if(User_Trailer % 12 == 0) { A_ChangeVelocity(0, 0, -0.005, CVF_RELATIVE); }
			if(User_Trailer % 12 == 0 && !(User_Trailer % 24 == 0) && !(User_Trailer % 36 == 0)) { A_SpawnItemEx("NutcrackerGloryTrailA",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLIENTSIDE); }
			if(User_Trailer % 24 == 0 && !(User_Trailer % 36 == 0)) { A_SpawnItemEx("NutcrackerGloryTrailB",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLIENTSIDE); }
			if(User_Trailer % 36 == 0) { A_SpawnItemEx("NutcrackerGloryTrailC",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLIENTSIDE); }
			User_Trailer++;
		}
		Loop;
	Death:
		TNT1 A 0 {
			A_GiveToTarget("GloryShotTimer",30);
			A_GiveToTarget("GloryTimer");
			A_StopSound(CHAN_AUTO);
			for(User_Counter = 80; User_Counter > 0; User_Counter--) {
				A_SpawnItemEx("NutcrackerShatterBullet",0,0,0,frandom(125.0,100.0),0,frandom(16.0,-16.0),frandom(0.0,360.0),SXF_TRANSFERPOINTERS);
			}
			A_TakeFromTarget("PowerTimeFreezer",1);
			ACS_NamedExecuteAlways("GloryEnd");
			User_Counter = 14;
			A_PlaySound("Spikebomb/Explosion",CHAN_AUTO|CHAN_NOPAUSE,0.9);
			A_PlaySound("Spikebomb/Add",CHAN_AUTO|CHAN_NOPAUSE);
			A_PlaySound("Spikebomb/Far",CHAN_AUTO|CHAN_NOPAUSE,0.8);
			A_SpawnItemEx("FreedomMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_Quake(3,55,0,768,"none");
			A_Quake(7,55,0,384,"none");
			A_Explode(3000,364,0,1);
		}
	DeathLoop:
		TNT1 A 4 {
			User_Counter--;
			A_Explode(40,364,0,1);
			Return A_JumpIf(User_Counter <= 0, 1);
		}
		Loop;
		TNT1 A 6;
		Stop;
	}
}

class NutcrackerSlowBullet : NutcrackerBullet
{
	Default
	{
		Speed 5;
		MissileType "";
		+NOTIMEFREEZE
	}
	
	int User_Cycle;
	
	States
	{
	Spawn:
		TRAC A 0 NoDelay A_ChangeVelocity(0, 0, 0.1, CVF_RELATIVE);
	Reset:
		TRAC A 0 {
			//A_SpawnItemEx("NutcrackerGloryTrailA",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLIENTSIDE);
			A_ChangeVelocity(0, 0, -0.005, CVF_RELATIVE);
			User_Cycle = 0;
		}
	SpawnMain:
		TRAC A 1 Bright {
			User_Cycle++;
			If(User_Cycle >= 12) { Return ResolveState("Reset"); }
			Return ResolveState(Null);
		}
		TRAC A 0 A_JumpIf(CountInv("PowerTimeFreezer",AAPTR_TARGET),"SpawnMain");
		Goto Spawn2;
	Spawn2:
		TRAC A 0 A_ScaleVelocity(40.0);
	SpawnMain2:
		TRAC A 1 Bright {
			A_SpawnItemEx("NutcrackerTrail",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_ChangeVelocity(0, 0, -0.15, CVF_RELATIVE);
		}
		Loop;
	Death:
		TNT1 A 25 {
			for(int AyayayyyaaaAztecMuscleGods = 0; AyayayyyaaaAztecMuscleGods < 40; AyayayyyaaaAztecMuscleGods++) {
				A_SpawnItemEx("NutcrackerShatterBullet",0,0,0,frandom(125.0,100.0),0,-frandom(12.0,-12.0),frandom(0.0,360.0),SXF_TRANSFERPOINTERS);
			}
			A_PlaySound("Nutcracker/Hit",CHAN_AUTO,0.8);
			A_SpawnItemEx("NutcrackerPuff",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_QuakeEx(4,4,4,25,0,384,"none",QF_SCALEDOWN);
		}
		Stop;
	}
}

//Trail and flight eyecandy.
class NutcrackerGloryTrailA : NutcrackerTrail
{
	Default
	{
		Scale 0.2;
		Alpha 0.0;
		+NOTIMEFREEZE
	}
	
	States
	{
	Spawn:
		NTCT A 0;
		Goto Blast;
	Blast:
		"####" "#" 0 A_Explode((50*random(1,5)),56,0);
		Goto PhaseOne;
	PhaseOne:
		"####" "#" 1 Bright {
			A_FadeIn(0.05);
			A_SetScale(Scale.X + 0.01);
			If(Alpha >= 0.5) { Return ResolveState("Looplet"); }
			If(!CountInv("PowerTimeFreezer",AAPTR_TARGET)) { Return ResolveState("Dissipate"); }
			Return ResolveState(Null);
		}
		Loop;
	Looplet:
		"####" "#" 0 A_JumpIf(CountInv("PowerTimeFreezer",AAPTR_TARGET),1);
		Goto Dissipate;
		"####" "#" 1 Bright {
			A_SetScale(Scale.X + 0.01);
			If(Scale.X > 1.5) { Return ResolveState("PhaseTwo"); }
			If(!CountInv("PowerTimeFreezer",AAPTR_TARGET)) { Return ResolveState("Dissipate"); }
			Return ResolveState(Null);
		}
		Loop;
	PhaseTwo:
		"####" "#" 1 Bright {
			A_FadeOut(0.005);
			A_SetScale(Scale.X+0.01);
			If(!CountInv("PowerTimeFreezer",AAPTR_TARGET)) { Return ResolveState("Dissipate"); }
			Return ResolveState(Null);
		}
		Loop;
	Dissipate:
		"####" "#" 1 Bright {
			A_FadeOut(0.05);
			A_SetScale(Scale.X+0.05);
		}
		Loop;
	}
}
class NutcrackerGloryTrailB : NutcrackerGloryTrailA
{
	States
	{
	Spawn:
		NTCT B 0;
		Goto Blast;
	}
}

class NutcrackerGloryTrailC : NutcrackerGloryTrailA
{
	States
	{
	Spawn:
		NTCT C 0;
		Goto Blast;
	}
}

class NutcrackerGloryParticler : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
	}
	
	Int User_Counter;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			User_Counter = random(8,10);
		}
	Main:
		"####" "#" 0 A_JumpIf(CountInv("PowerTimeFreezer",AAPTR_TARGET),1);
		Stop;
		TNT1 A random(1,3) {
			A_SpawnItemEx("NutcrackerGloryParticle",frandom(512.0,-512.0),
			frandom(512.0,-512.0),frandom(512.0,-512.0),frandom(0.1,1.5),
			frandom(0.1,1.5),frandom(frandom(0.1,1.5),frandom(-0.1,-1.5)),
			frandom(0.0,360.0),SXF_CLIENTSIDE|SXF_TRANSFERPOINTERS);
			A_SetAngle(Angle + 15);
			User_Counter--;
			Return A_JumpIf(User_Counter <= 0, "Null");
		}
		Loop;
	}
}

class NutcrackerGloryParticle : Actor
{
	Default
	{
		Renderstyle "Add";
		Alpha 0.0;
		Scale 0.0;
		+NOTIMEFREEZE
		+NOINTERACTION
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetScale(frandom(0.03,0.02));
	SpriteSetup:
		TNT1 A 0 A_Jump(256,"SpriteA","SpriteB","SpriteC");
	SpriteA:
		FREF A 0;
		Goto FadeIn;
	SpriteB:
		FREF B 0;
		Goto FadeIn;
	SpriteC:
		FREF C 0;
		Goto FadeIn;
	FadeIn:
		"####" "#" 1 Bright {
			A_FadeIn(frandom(0.025,0.075));
			A_SetScale(Scale.X * 1.02);
			Return A_JumpIf(Alpha >= 0.95, "PhaseTwo");
		}
		Loop;
	PhaseTwo:
		"####" "#" 0 A_JumpIfInTargetInventory("PowerTimeFreezer",1,1);
		Goto Dissipate;
		"####" "#" 0 A_ChangeVelocity(frandom(-1.0,1.0),frandom(1.0,-1.0),frandom(1.0,-1.0),CVF_RELATIVE);
		"####" "#" 0 A_SetScale(Scale.X * 0.99);
		"####" "#" 3 Bright A_FadeOut(frandom(0.1,0.2));
		"####" "#" 3 Bright A_FadeIn(frandom(0.008,0.18));
		Loop;
	Dissipate:
		"####" "#" 1 Bright {
			A_FadeOut(0.1);
			A_SetScale(Scale.X * 0.99);
		}
		Loop;
	}
}

//Glory Shot passby effect.
class NutcrackerGloryItem : CustomInventory
{
	Default
	{
		Inventory.Amount 0;
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
		Inventory.PickupFlash "None";
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.NOSCREENFLASH
	}
	
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIfInventory("PowerGloryShotDelay",1,"Null");
		TNT1 A 0 {
			A_GiveInventory("GloryShotPrimer");
			A_GiveInventory("GloryShotInnardExploder");
		}
		Stop;
   }
}

class GloryShotPrimer : PowerupGiver //To prevent blast overload, there must be such locker.
{
	Default
	{
		Powerup.Duration -10;
		Powerup.Type "PowerGloryShotDelay";
		Powerup.Color "None", 0.0;
		Inventory.PickupMessage "Dun dunn dunnn dun duuun. Dun dunnn dun dun duuuun.";
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
	}
	
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

class PowerGloryShotDelay : Powerup {}

class GloryShotInnardExploder : NutcrackerGloryItem
{
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("GloryShotBlast",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}

class GloryShotBlast : Actor
{
	Default
	{
		Damagetype "Patriarch";
		+NOINTERACTION
		+FORCERADIUSDMG
	}
	
	States
	{
	Spawn:
		TNT1 B random(2,10); //So you won't see GLDEF going off during timefreeze. :V
		TNT1 A 28 {
			A_PlaySound("Explosion/Init",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Main",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Layer",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Flavor",CHAN_AUTO,0.8);
			A_SpawnItemEx("Patriarch_Blast",0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_Explode(175,148,0);
			A_QuakeEx(3,3,3,12,0,512,"none",QF_SCALEDOWN);
		}
		Stop;
	}
}

//Glory shot timer item
class GloryTimer : NutcrackerGloryItem
{
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Pickup:
		TNT1 A 0 ACS_NamedExecuteAlways("Glory Blockade");
		Stop;
	}
}

//Glory Shot impact blast
class FreedomBase : Actor
{
	Default
	{
		Alpha 0.0;
		Scale 0.0;
		+NOINTERACTION
		+NOTONAUTOMAP
		+FORCEXYBILLBOARD
	}
}

class FreedomFX : FreedomBase
{ 
	States
	{
	Spawn:
		TNT1 A 80;
		Stop;
	}
}

class FreedomSmoke : FreedomBase
{
	Default
	{
		Renderstyle "Translucent";
	}
	
	States
	{
		Spawn:
			TNT1 A random(12,17);
			TNT1 A 0; //NoDelay A_ScaleVelocity(frandom(0.8,1.1));
		SetupSprite:
			TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
								 "SpriteE", "SpriteF", "SpriteG", "SpriteH",
								 "SpriteI", "SpriteJ", "SpriteK", "SpriteL");
		SpriteA:
			FRES A 0;
			Goto SetupScale;
		SpriteB:
			FRES B 0;
			Goto SetupScale;
		SpriteC:
			FRES C 0;
			Goto SetupScale;
		SpriteD:
			FRES D 0;
			Goto SetupScale;
		SpriteE:
			FRES E 0;
			Goto SetupScale;
		SpriteF:
			FRES F 0;
			Goto SetupScale;
		SpriteG:
			FRES G 0;
			Goto SetupScale;
		SpriteH:
			FRES H 0;
			Goto SetupScale;
		SpriteI:
			FRES I 0;
			Goto SetupScale;
		SpriteJ:
			FRES J 0;
			Goto SetupScale;
		SpriteK:
			FRES K 0;
			Goto SetupScale;
		SpriteL:
			FRES L 0;
			Goto SetupScale;
		SetupScale:
			"####" "#" 0 A_SetScale(frandom(0.9, 1.1));
		FadeIn:
			"####" "#" 1 {
				A_FadeIn(FRandom(0.01, 0.04));
				A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0);
				A_SetScale(Scale.X + FRandom(0.01, 0.02));
				Return A_JumpIf(Alpha >= 0.4, "Inter");
			}
			Loop;
		Inter:
			"####" "#" 1 {
				A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0);
				A_SetScale(Scale.X + FRandom(0.01, 0.02));
				Return A_Jump(24,"FadeOut");
			}
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_FadeOut(FRandom(0.01,0.02));
				A_ChangeVelocity(frandom(-0.02, 0.02), frandom(-0.02, 0.02), frandom(-0.02, 0.03), 0);
				A_SetScale(Scale.X + FRandom(0.01, 0.02));
			}
			Loop;
	}
}

class FreedomCloud : FreedomBase
{
	Default
	{
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
										 "SpriteE", "SpriteF", "SpriteG", "SpriteH");
		SpriteA:
			CLOD A 0;
			Goto SetupScale;
		SpriteB:
			CLOD B 0;
			Goto SetupScale;
		SpriteC:
			CLOD C 0;
			Goto SetupScale;
		SpriteD:
			CLOD D 0;
			Goto SetupScale;
		SpriteE:
			CLOD E 0;
			Goto SetupScale;
		SpriteF:
			CLOD F 0;
			Goto SetupScale;
		SpriteG:
			CLOD G 0;
			Goto SetupScale;
		SpriteH:
			CLOD H 0;
			Goto SetupScale;
		SetupScale:
			"####" "#" 0 A_SetScale(frandom(1.2, 1.65));
		FadeIn:
			"####" "#" 1 {
				A_FadeIn(frandom(0.15, 0.1));
				A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0);
				A_SetScale(Scale.X + frandom(0.01, 0.025));
				Return A_JumpIf(Alpha >= 0.8, "FadeOut");
			}
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_FadeOut(frandom(0.05,0.02));
				A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0);
				A_SetScale(Scale.X + frandom(0.025, 0.05));
			}
			Loop;
	}
}

class FreedomBlast : FreedomBase
{
	Default
	{
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(255, "SpriteA", "SpriteB", "SpriteC", "SpriteD","SpriteE", "SpriteF");
		SpriteA:
			FBST A 0;
			Goto SetupScale;
		SpriteB:
			FBST B 0;
			Goto SetupScale;
		SpriteC:
			FBST C 0;
			Goto SetupScale;
		SpriteD:
			FBST D 0;
			Goto SetupScale;
		SpriteE:
			FBST E 0;
			Goto SetupScale;
		SpriteF:
			FBST F 0;
			Goto SetupScale;
		SetupScale:
			"####" "#" 0 A_SetScale(frandom(1.2, 1.65));
		FadeIn:
			"####" "#" 1 {
				A_FadeIn(frandom(0.15, 0.1));
				A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0);
				A_SetScale(Scale.X + frandom(0.02, 0.01));
				Return A_JumpIf(Alpha >= 0.8, "FadeOut");
			}
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_FadeOut(frandom(0.05,0.02));
				A_ChangeVelocity(frandom(-0.06, 0.06), frandom(-0.06, 0.06), frandom(-0.06, 0.07), 0);
				A_SetScale(Scale.X + frandom(0.02, 0.01));
			}
			Loop;
	}
}

class FreedomEmber : FreedomBase
{
	Default
	{
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD","SpriteE", "SpriteF");
		SpriteA:
			FREM A 0;
			Goto SetupScale;
		SpriteB:
			FREM B 0;
			Goto SetupScale;
		SpriteC:
			FREM C 0;
			Goto SetupScale;
		SpriteD:
			FREM D 0;
			Goto SetupScale;
		SpriteE:
			FREM E 0;
			Goto SetupScale;
		SpriteF:
			FREM F 0;
			Goto SetupScale;
		SetupScale:
			"####" "#" 0 A_SetScale(frandom(0.04, 0.1));
		FadeIn:
			"####" "#" 1 A_FadeIn(FRandom(0.99, 0.9));
		Intern:
			"####" "#" 3 Bright A_Jump(200, "FadeOut");
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_Weave(FRandom(0.9, 1.0), frandom(0.9, 1.0),
										frandom(70, 90), frandom(70, 90));
				A_ChangeVelocity(Vel.X * frandom(0.93, 0.99),
								 Vel.Y * frandom(0.93, 0.99),
								 Vel.Z - frandom(0.1, 0.2),
										  CVF_REPLACE);
				A_SetScale(Scale.X - frandom(0.002, 0.001));
				Return A_JumpIf(Scale.X <= 0.0, "Null");
			}
			Loop;
	}
}

class FreedomShockwaveA : FreedomBase
{
	Default
	{
		Renderstyle "Add";
		Alpha 0.99;
		Scale 0.9;
	}
	
	States
	{
		Spawn:
			NTCT A 0;
			Goto Looplet;
		Looplet:
			"####" "#" 1 Bright {
				A_SetScale(Scale.X + frandom(0.12, 0.09));
				A_FadeOut(frandom(0.02,0.05));
			}
			Loop;
	}
}

class FreedomShockwaveB : FreedomShockwaveA
{
	Default
	{
		Scale 1.1;
	}
	
	States
	{
		Spawn:
			NTCT B 0;
			Goto Looplet;
		Looplet:
			"####" "#" 1 Bright {
				A_SetScale(Scale.X + FRandom(0.12, 0.09));
				A_FadeOut(frandom(0.02,0.05));
			}
			Loop;
	}
}

class FreedomShockwaveC : FreedomShockwaveA
{
	Default
	{
		Scale 1.3;
	}
	
	States
	{
		Spawn:
			NTCT C 0;
			Goto Looplet;
		Looplet:
			"####" "#" 1 Bright {
				A_SetScale(Scale.X + FRandom(0.12, 0.09));
				A_FadeOut(frandom(0.02,0.05));
			}
			Loop;
	}
}

class FreedomFlare : FreedomBase
{
	Default
	{
		Renderstyle "Add";
		Alpha 0.99;
		Scale 7.5;
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "SpriteA", "SpriteB", "SpriteC");
	SpriteA:
		FREF A 0;
		Goto Looplet;
	SpriteB:
		FREF B 0;
		Goto Looplet;
	SpriteC:
		FREF C 0;
		Goto Looplet;
	Looplet:
		"####" "#" 1 Bright {
			A_FadeOut(0.02);
			A_SetScale(Scale.X - frandom(0.05, 0.15));
			Return A_JumpIf(Scale.X <= 0.0, "Null");
		}
		Loop;
	}
}

class FreedomExplosionMain : FreedomBase
{
	Int User_Counter;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { User_Counter = 30; }
		Goto Emit;
	Emit:
		TNT1 A 1 {
			A_SpawnItemEx("FreedomCloud", frandom(-45.0, 45.0),
							frandom(-45.0, 45.0), frandom(-45.0, 45.0),
							frandom(1.0, 3.5), 0,
							frandom(-1.0, 4.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 60);
			A_SpawnItemEx("FreedomBlast", frandom(-45.0, 45.0),
							frandom(-45.0, 45.0), frandom(-45.0, 45.0),
							frandom(1.0, 3.5), 0,
							frandom(-2.0, 2.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 60);		
			if(!GetCvar("TB_SmokeReduction") == 2) {
				A_SpawnItemEx("FreedomSmoke", frandom(-45.0, 45.0),
								frandom(-45.0, 45.0), frandom(-45.0, 45.0),
								frandom(0.5, 2.5), 0,
								frandom(-2.0, 2.5), frandom(0.0,360.0), SXF_CLIENTSIDE, 80);
			}
			for(int Paternoster = 0; Paternoster < 2; Paternoster++) {
				A_SpawnItemEx("FreedomEmber", frandom(-35.0, 35.0),
								frandom(-35.0, 35.0), frandom(-45.0, 45.0),
								frandom(5.0, 17.0), 0,
								frandom(2.0, 9.0), frandom(0.0,360.0), SXF_CLIENTSIDE, 40);
			}
			User_Counter--;
			Return A_JumpIf(User_Counter <= 0,"Null");
		}
		Loop;
	}
}

class FreedomMain : FreedomBase
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			A_SpawnItemEx("FreedomExplosionMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("FreedomFlare",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("FreedomShockwaveA",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("FreedomShockwaveB",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("FreedomShockwaveC",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("FreedomFX",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
		}
		Stop;
	}
}


class NutcrackerTimeStop : PowerupGiver
{
	Default
	{
		Inventory.Amount 0;
		Powerup.Type "PowerTimeFreezer";
		Powerup.Duration -0x7FFFFFFF;
		//Inventory.Icon "NUTJOB0";
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
	
	states
	{
	Spawn:
		TNT1 A 1;
		stop;
	}
}