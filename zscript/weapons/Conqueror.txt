/*
CRUDUTS:

Sprites:
Weapon - DoomNukem (I had cut it up and animated it though.)

Sounds:
Machineguns - C&C: Generals (EA)
Mortar - Wolfenstein: Enemy Territory (Splash Damage)
*/

class ConquerorSelected 	  : Inventory { Default { Inventory.MaxAmount 1; } }
class ConquerorUpgrade 		  : Inventory { Default { Inventory.MaxAmount 1; } }
class ConquerorMode  		  : Inventory { Default { Inventory.MaxAmount 1; } }
class ConquerorMortarCooldown : Inventory { Default { Inventory.MaxAmount 105; } }

class ConquerorAmmo : Ammo
{
	Default
	{
		Inventory.PickupMessage "How did you even do that, you crimetastic person";
		Inventory.Amount 1;
		Inventory.MaxAmount 100;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 100;
		Inventory.PickupSound "Machete/Up";
		Inventory.Icon "CNQGX0";
		+INVENTORY.IGNORESKILL
		+INVENTORY.UNDROPPABLE
	}
	
	States
	{
	Spawn:
		TNT1 A -1;
		Loop;
	}
}

class Conqueror : Weapon
{
	Default
	{
		Health 3;
		Weapon.AmmoUse 0;
		Weapon.AmmoGive 100;
		Weapon.AmmoType "ConquerorAmmo";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 1;
		Weapon.AmmoType2 "JunkItem";
		Weapon.SlotNumber 8;
		Weapon.SelectionOrder 3;
		Weapon.UpSound "Conqueror/Up";
		Weapon.Kickback 50;
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 0.7;
		Weapon.BobRangeY 0.7;
		Weapon.BobRangeX 1.2;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Rolled out the ``Conqueror`` gun platform! Just when you thought you were using enough gun!... Yeah, you weren't. (8)";
		Obituary "%o was command'n'conquered by %k's rock'n'rolling gunshow.";
		Scale 0.7;
		+WEAPON.NOALERT
		+WEAPON.AMMO_OPTIONAL
		//+WEAPON.TWOHANDED
		//+NOAUTOAIM
	}
	
	// Gun organizing.
	int ShotgunBuffer;
	int MachinegunBuffer;
	int GrenadeBuffer;
	
	// Fun.
	int gibberish;

	// Ammo Refill.
	int Countdown, CountdownSummit, AmmoCount;
    Class<Inventory> AmmoClass;
	
	override void AttachToOwner(Actor user)
	{
		Super.AttachToOwner(user);
		user.TakeInventory("JunkItem", 1);
		Countdown = 0;
        CountdownSummit = 50;
        AmmoCount = 1;
        AmmoClass = 'ConquerorAmmo';
	}
	
	override String PickupMessage()
	{
		if(owner)
		{
			return PickupMsg;
		}
		else
		{
			return "You already have this weapon, and since its a massive pile of metal, might as well dismantle it. (+80 junk!)";
		}
	}
	
	// Probably the dumbest, laziest solution till date~
	override bool HandlePickup(Inventory item)
	{
		bool success = super.HandlePickup(item);
		if(success && item.bPickupGood)
		{
			owner.GiveInventory("JunkItem", 79);
		}
		return success;
	}
	
	override void DoEffect() {
		// Also had put mortar cooldown cause I had no better place for it.
		if(Owner.Health < 30 || Owner.CountInv("PowerBlazing")) { Owner.A_TakeInventory("ConquerorMortarCooldown",3); }
		else if(Owner.Health < 60) 							    { Owner.A_TakeInventory("ConquerorMortarCooldown",2); }
		else				  	  							    { Owner.A_TakeInventory("ConquerorMortarCooldown",1); }
		AmmoRefill();
		Super.DoEffect();
    }
	
	void AmmoRefill() {
		let AmmoToCheck = Ammo(Owner.FindInventory(AmmoClass));
        if (AmmoToCheck.Amount < AmmoToCheck.MaxAmount) {
			Countdown++;
			if(Countdown >= CountdownSummit) {
				Owner.A_GiveInventory(AmmoClass, AmmoCount);
				Countdown = 0;
			}
        }
	}
	
	States
	{
	//Mandatory states.
	Deselect:
		CNQG A 0 {
			A_TakeInventory("ConquerorSelected");
			A_TakeInventory("PowerCrafterTimer");
			A_ZoomFactor(1.0);
			A_SetCrosshair(0);
		}
		CNQG A 1 A_Lower(12);
		Wait;
		
	DeadLowered:
		TNT1 A 0 {
			A_Overlay(-44,"none");
			A_Overlay(-21,"none");
			A_Overlay(-25,"none");
			
			A_Overlay(-12,"none");
			A_Overlay(-11,"none");
			A_Overlay(-10,"none");
			A_Overlay(-6,"none");
			A_Overlay(-5,"none");
			A_Overlay(-4,"none");
			A_Overlay(-3,"none");
			
			A_Overlay(2,"none");
		}
		TNT1 A -1;
		Stop;
		
	Select:
		TNT1 A 0 {
			invoker.ShotgunBuffer = 0;
			invoker.MachinegunBuffer = 0;
			invoker.GrenadeBuffer = 0;
			invoker.gibberish = 0;
			
			A_Overlay(-44,"ExtraSound");	// Extra sound handler.
			A_Overlay(-21,"QuadLol");		// Quad damage sounder.
			A_Overlay(-25,"Underlay");		// Lil' fix for the furthermost sides. The rest is pretty self-explanatory.
			
			// 14 is reserved for mortar.
			A_Overlay(-12,"BrowningBlasters"); // 12-13 is blasters.
			A_Overlay(-11,"GrenadeLauncherRight");
			A_Overlay(-10,"GrenadeLauncherLeft");
			A_Overlay(-6,"Machineguns"); 	// 6-9 is reserved for quad cannon machineguns.
			A_Overlay(-5,"ShotgunRight");
			A_Overlay(-4,"ShotgunLeft");
			A_Overlay(-3,"MainCannon");
			
			A_Overlay(2,"MachinegunBelts");
			
			A_GiveInventory("ConquerorSelected");
		}
		CNQG A 1 A_Raise(12);
		Wait;
		
	Ready:
		CNQG A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Loop;
	Fire:
		CNQG A 0;
		Goto Ready;
	Spawn:
		CNQG X -1;
		Stop;
		
	//Extra sound.
	ExtraSound:
		TNT1 A 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK))
			  {
				if(GetCvar("TB_ConquerorMode") == 2) {
					A_StartSound("Throttle/RocknRoll",5,CHANF_LOOPING,0.8);
					Return ResolveState(Null);
				}
				Else If(GetCvar("TB_ConquerorMode") == 1) {
					invoker.gibberish++;
					if(invoker.gibberish >= 7) {
						if(random(0,1) == 0) {
							invoker.gibberish = 0;
							A_StartSound("Redneck/Gibberish",8,0,1.0);
							Return ResolveState(Null);
						}
					}
				}
			}
			if(GetCvar("TB_MinigunMode") == 2) { A_StopSound(5); }
			Return ResolveState(Null);
		}
		Loop;
	ExtendBop:
		TNT1 A 7;
		goto ExtraSound;
	
	//Switching firing modes.
	Reload:
		CNQG A 0 A_JumpIf(CountInv("ConquerorUpgrade"),1);
		Goto Ready;
		CNQG A 0 {
			A_PlaySound("Conqueror/Mode",1,CHANF_OVERLAP);
			if(CountInv("ConquerorMode")) {
				A_TakeInventory("ConquerorMode",1);
				A_Print("\c[white]Grenades + Classic shells loaded.",2);
			} else {
				A_GiveInventory("ConquerorMode",1);
				A_Print("\c[white]Hellraisers + Dem shells loaded.",2);
			}
		}
	Animatore:
		CNQG A 1 A_WeaponOffset(0,33);
		CNQG A 1 A_WeaponOffset(0,35);
		CNQG A 1 A_WeaponOffset(0,37);
		CNQG A 1 A_WeaponOffset(0,40);
		CNQG A 1 A_WeaponOffset(0,41);
		CNQG A 3 A_WeaponOffset(0,42);
		CNQG A 1 A_WeaponOffset(0,41);
		CNQG A 1 A_WeaponOffset(0,38);
		CNQG A 1 A_WeaponOffset(0,35);
		CNQG A 1 A_WeaponOffset(0,33);
		CNQG A 4 A_WeaponOffset(0,32);
		Goto Ready;
		
	//Mortar.
	Zoom:
		CNQG A 0 A_JumpIf(CountInv("ConquerorUpgrade") && !CountInv("ConquerorMortarCooldown") && CountInv("ConquerorAmmo") >= 8 && GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM,1);
		Goto Ready;
		CNQG A 0 {
			A_AlertMonsters();
			if(CountInv("PowerQuadDamage")) {
				A_StartSound("QuadDamage/Fire",1,CHANF_OVERLAP);
				A_SetBlend("Blue",0.075,25);
			}
			A_Overlay(14,"MortarFlash");
			A_OverlayFlags(14,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(14,STYLE_Add);
			A_TakeInventory("ConquerorAmmo",8,TIF_NOTAKEINFINITE);
			A_GiveInventory("ConquerorMortarCooldown",105);
			//A_FireBullets(0, 0, 1, 0, "ConquerorMortarStrikeSpawner");
			for(int borf = 0; borf < 6; borf++) {
				A_SpawnItemEx("Gunsmoke_Medium",20,0,30,frandom(0.5,0.1),frandom(-0.2,0.2),frandom(0.7,0.1),0,SXF_CLIENTSIDE);
			}
			A_FireProjectile("ConquerorMortarStrikeSpawner",0,0,0,-5,FPF_NOAUTOAIM);
			A_SpawnItemEx("ConquerorMortarUpward",45,0,15,0,0,100,0,SXF_SETTARGET);
			A_StartSound("Conqueror/MortarFire",1,CHANF_OVERLAP); //A_SpawnItemEx("ConqMortarSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
			A_StartSound("Conqueror/MortarFire",1,CHANF_OVERLAP);
		}
		CNQG A 1   A_WeaponOffset(0,33);
		CNQG A 1 { A_WeaponOffset(0,35); A_SetPitch(pitch+0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		CNQG A 1 { A_WeaponOffset(0,39); A_SetPitch(pitch+1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG A 1 { A_WeaponOffset(0,42); A_SetPitch(pitch+2.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		CNQG A 1 { A_WeaponOffset(0,43); A_SetPitch(pitch+1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG A 1 { A_WeaponOffset(0,44); A_SetPitch(pitch+0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG A 4 { A_WeaponOffset(0,45); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG A 1 { A_WeaponOffset(0,44); A_SetPitch(pitch-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG A 1 { A_WeaponOffset(0,43); A_SetPitch(pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG A 1 { A_WeaponOffset(0,42); A_SetPitch(pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG A 1 { A_WeaponOffset(0,39); A_SetPitch(pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		CNQG A 1 { A_WeaponOffset(0,35); A_SetPitch(pitch-0.75 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		CNQG A 1 { A_WeaponOffset(0,33); A_SetPitch(pitch-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		CNQG A 1 { A_WeaponOffset(0,32); A_SetPitch(pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE); }
		Loop;
	MortarFlash:
		CNQO ABCDEFGHI 1 Bright;
		Stop;
		
	//Underlay.
	Underlay:
		CNQG B 1;
		Loop;

	//Quad Sounder.
	QuadLol:
		TNT1 A 1 {
			if(CountInv("PowerQuadDamage") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK|BT_ALTATTACK)) {
				A_PlaySound("QuadDamage/Fire",0);
				A_SetBlend("Blue",0.075,25);
				Return ResolveState("QuadBanana");
			}
			Return ResolveState(Null);
		}
		Loop;
	QuadBanana:
		TNT1 A 15;
		Goto QuadLol;
	
	//Main Cannon.
	MainCannon:
		CNQG C 1 {
			if(CountInv("ConquerorAmmo") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK|BT_ALTATTACK)) { Return ResolveState("FireMainCannon"); }
			Return ResolveState(Null);
		}
		Loop;
	FireMainCannon:
		CNQG C 2 {
			A_AlertMonsters();
			A_Overlay(3,"MainCannonFlash");
			A_OverlayFlags(3,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(3,STYLE_Add);
			A_QuakeEx(2,2,2,7,0,256,"none",QF_SCALEDOWN);
			A_QuakeEx(2,2,2,7,0,256,"none",QF_SCALEDOWN|QF_WAVE,1.0,1.0,1.5);
			A_TakeInventory("ConquerorAmmo",1,TIF_NOTAKEINFINITE);
			A_StartSound("Patriarch/Cannon",1,CHANF_OVERLAP); //A_PlaySound("Patriarch/Cannon",5);
			A_StartSound("Patriarch/Add",1,CHANF_OVERLAP,0.7); //A_PlaySound("Patriarch/Add",1,0.7);
			A_FireProjectile("Conqueror90mmProjectile",0,0,0,-5);
			A_FireProjectile("GunsmokeSpawner_Medium",0,0,0,-7,FPF_NOAUTOAIM);
			A_SetPitch(pitch-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG C 1   A_OverlayOffset(OverlayID(),0,4);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,8); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,9);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,10); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,11);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,12); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,11);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,9); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,7);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,4); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,2);
		CNQG C 1 { A_OverlayOffset(OverlayID(),0,1); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG C 1   A_OverlayOffset(OverlayID(),0,0);
		Goto MainCannon;
	MainCannonFlash:
		CNQF A 2 Bright;
		Stop;
		
	//Shotguns.
	ShotgunLeft:
		CNQG F 1 {
			if(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { invoker.ShotgunBuffer++; }
			else										  { invoker.ShotgunBuffer = 0; }
			if( CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("GreenMana") >= 8) || (!CountInv("ConquerorMode") && CountInv("BlueMana") >= 4)) && invoker.ShotgunBuffer >= 5) { Return ResolveState("FireShotgunLeft"); }
			if(!CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("DemShellsAmmo")) || (!CountInv("ConquerorMode") && CountInv("ShellsAmmo") >= 2)) && invoker.ShotgunBuffer >= 5) { Return ResolveState("FireShotgunLeft"); }
			Return ResolveState(Null);
		}
		Loop;
	FireShotgunLeft:
		CNQG F 2 {
			A_AlertMonsters();
			invoker.ShotgunBuffer = 0;
			A_Overlay(4,"ShotgunLeftFlash");
			A_OverlayFlags(4,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(4,STYLE_Add);
			If(CountInv("ConquerorMode")) {
				if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",8,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("DemShellsAmmo",1,TIF_NOTAKEINFINITE); }
				A_StartSound("ChromeJustice/Fire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqJusticeSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireBullets(2.2, 2.2, 30, 5, "BulletPuff",0);	
			}
			Else {
				if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",4,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("ShellsAmmo",2,TIF_NOTAKEINFINITE); }
				A_StartSound("Fleshrend/Fire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqShotgunSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireBullets(8.0, 2.0, 16, 5, "BulletPuff");
				If(CountInv("RendUpgrade")) {
					A_FireBullets(8.0, 2.0, 8, 5, "BulletPuff",0);
				}
				If(CountInv("TricorneShot")) {
					A_FireBullets(8.0, 2.0, 8, 5, "BulletPuff",0);
				}
			}
			A_FireProjectile("GunsmokeSpawner_Medium",0,0,-15,-3,FPF_NOAUTOAIM);
			A_SetAngle(angle+1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG F 1   A_OverlayOffset(OverlayID(),-3,2);
		CNQG F 1 { A_OverlayOffset(OverlayID(),-7,8); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG F 1   A_OverlayOffset(OverlayID(),-12,10);
		CNQG F 2 { A_OverlayOffset(OverlayID(),-16,13);
			if(CountInv("ConquerorMode")) { A_FireProjectile("DatShottyCasingSpawnerReversed",0,0,-5,-3,FPF_NOAUTOAIM); }
			else 						  { A_FireProjectile("FleshyCasingSpawnerReversed",0,0,-5,-3,FPF_NOAUTOAIM); }
		}
		CNQG F 1 { A_OverlayOffset(OverlayID(),-14,12); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG F 1   A_OverlayOffset(OverlayID(),-12,10);
		CNQG F 1 {
			A_OverlayOffset(OverlayID(),-7,8);
			if( CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("GreenMana") >= 8) || (!CountInv("ConquerorMode") && CountInv("BlueMana") >= 4)) && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { A_Overlay(-5,"FireShotgunRight"); }
			if(!CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("DemShellsAmmo")) || (!CountInv("ConquerorMode") && CountInv("ShellsAmmo") >= 2)) && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { A_Overlay(-5,"FireShotgunRight"); }
		}
		CNQG F 1 { A_OverlayOffset(OverlayID(),-5,6); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG F 1   A_OverlayOffset(OverlayID(),-3,2);
		CNQG F 1 { A_OverlayOffset(OverlayID(),-1,1); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG F 1   A_OverlayOffset(OverlayID(),0,0);
		Goto ShotgunLeft;
	ShotgunLeftFlash:
		CNQS A 2 Bright;
		Stop;
		
	ShotgunRight:
		CNQG G 1;
		Loop;
	FireShotgunRight:
		CNQG G 2 {
			A_AlertMonsters();
			A_Overlay(5,"ShotgunRightFlash");
			A_OverlayFlags(5,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(5,STYLE_Add);
			If(CountInv("ConquerorMode")) {
				if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",8,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("DemShellsAmmo",1,TIF_NOTAKEINFINITE); }
				A_StartSound("ChromeJustice/Fire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqJusticeSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireBullets(2.2, 2.2, 30, 5, "BulletPuff",0);	
			}
			Else {
				if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",4,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("ShellsAmmo",2,TIF_NOTAKEINFINITE); }
				A_StartSound("Fleshrend/Fire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqShotgunSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireBullets(8.0, 2.0, 16, 5, "BulletPuff");
				If(CountInv("RendUpgrade")) {
					A_FireBullets(8.0, 2.0, 8, 5, "BulletPuff",0);
				}
				If(CountInv("TricorneShot")) {
					A_FireBullets(8.0, 2.0, 8, 5, "BulletPuff",0);
				}
			}
			A_FireProjectile("GunsmokeSpawner_Medium",0,0,15,-3,FPF_NOAUTOAIM);
			A_SetAngle(angle-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG G 1   A_OverlayOffset(OverlayID(),3,2);
		CNQG G 1 { A_OverlayOffset(OverlayID(),7,8); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG G 1   A_OverlayOffset(OverlayID(),12,10);
		CNQG G 2 { A_OverlayOffset(OverlayID(),16,13);
			if(CountInv("ConquerorMode")) { A_FireProjectile("DatShottyCasingSpawner",0,0,5,-3,FPF_NOAUTOAIM); }
			else 						  { A_FireProjectile("FleshyCasingSpawner",0,0,5,-3,FPF_NOAUTOAIM); }
		}
		CNQG G 1 { A_OverlayOffset(OverlayID(),14,12); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG G 1   A_OverlayOffset(OverlayID(),12,10);
		CNQG G 1   A_OverlayOffset(OverlayID(),7,8);
		CNQG G 1 { A_OverlayOffset(OverlayID(),5,6); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG G 1   A_OverlayOffset(OverlayID(),3,2);
		CNQG G 1 { A_OverlayOffset(OverlayID(),1,1); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG G 1   A_OverlayOffset(OverlayID(),0,0);
		Goto ShotgunRight;
	ShotgunRightFlash:
		CNQS B 2 Bright;
		Stop;
	
	//Machinegun belts.
	MachinegunBelts:
		CNQB A 1 A_JumpIf(((!CountInv("HexenCounter") && CountInv("BulletAmmo")) || (CountInv("HexenCounter") && CountInv("BlueMana"))) && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK),1);
		Loop;
		CNQB A 0 A_JumpIf(Health < 60 || CountInv("PowerBlazing"),4);
		CNQB ABC random(2,1);
		Loop;
		CNQB ABC 1;
		Loop;
		
	//Machineguns.
	Machineguns:
		TNT1 A 1 {
			if(((!CountInv("HexenCounter") && CountInv("BulletAmmo")) || (CountInv("HexenCounter") && CountInv("BlueMana"))) && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) {
				A_AlertMonsters();
				invoker.MachinegunBuffer++;
				//A_LogInt(Invoker.MachinegunBuffer);
				if(Health <= 30 || CountInv("PowerBlazing")) {
					if(invoker.MachinegunBuffer) {
						A_FireBullets(1.5, 0.5, -1, 8, "BulletPuff",FBF_USEAMMO,8192);
						A_StartSound("Conqueror/MachinegunFire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqMachinegunSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
						if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",1,TIF_NOTAKEINFINITE); }
						else 						 { A_TakeInventory("BulletAmmo",1,TIF_NOTAKEINFINITE); }
					}
					if(invoker.MachinegunBuffer == 1) { A_Overlay(6,"MachinegunFire1"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-16,-9,FPF_NOAUTOAIM); A_OverlayFlags(6,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(6,STYLE_Add); }
					if(invoker.MachinegunBuffer == 2) { A_Overlay(7,"MachinegunFire2"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-17,-12,FPF_NOAUTOAIM); A_OverlayFlags(7,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(7,STYLE_Add); }
					if(invoker.MachinegunBuffer == 3) { A_Overlay(8,"MachinegunFire3"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 18,-12,FPF_NOAUTOAIM); A_OverlayFlags(8,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(8,STYLE_Add); }
					if(invoker.MachinegunBuffer == 4) { A_Overlay(9,"MachinegunFire4"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 17,-9,FPF_NOAUTOAIM); A_OverlayFlags(9,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(9,STYLE_Add); invoker.MachinegunBuffer = 0; }
				}
				else if(Health <= 60 || CountInv("PowerBlazing")) {
					if(invoker.MachinegunBuffer % 2 == 0) {
						A_FireBullets(1.5, 0.5, -1, 8, "BulletPuff",FBF_USEAMMO,8192);
						A_StartSound("Conqueror/MachinegunFire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqMachinegunSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
						if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",1,TIF_NOTAKEINFINITE); }
						else 						 { A_TakeInventory("BulletAmmo",1,TIF_NOTAKEINFINITE); }
					}
					if(invoker.MachinegunBuffer == 2) { A_Overlay(6,"MachinegunFire1"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-16,-9,FPF_NOAUTOAIM); A_OverlayFlags(6,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(6,STYLE_Add); }
					if(invoker.MachinegunBuffer == 4) { A_Overlay(7,"MachinegunFire2"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-17,-12,FPF_NOAUTOAIM); A_OverlayFlags(7,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(7,STYLE_Add); }
					if(invoker.MachinegunBuffer == 6) { A_Overlay(8,"MachinegunFire3"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 18,-12,FPF_NOAUTOAIM); A_OverlayFlags(8,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(8,STYLE_Add); }
					if(invoker.MachinegunBuffer == 8) { A_Overlay(9,"MachinegunFire4"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 17,-9,FPF_NOAUTOAIM); A_OverlayFlags(9,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(9,STYLE_Add); invoker.MachinegunBuffer = 0; }
				}
				else if(Health >= 60 || CountInv("PowerBlazing")) {
					if(invoker.MachinegunBuffer % 3 == 0) {
						A_FireBullets(1.5, 0.5, -1, 8, "BulletPuff",FBF_USEAMMO,8192);
						A_StartSound("Conqueror/MachinegunFire",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqMachinegunSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
						if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",1,TIF_NOTAKEINFINITE); }
						else 						 { A_TakeInventory("BulletAmmo",1,TIF_NOTAKEINFINITE); }
					}
					if(invoker.MachinegunBuffer == 3) { A_Overlay(6,"MachinegunFire1"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-16,-9,FPF_NOAUTOAIM); A_OverlayFlags(6,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(6,STYLE_Add); }
					if(invoker.MachinegunBuffer == 6) { A_Overlay(7,"MachinegunFire2"); A_FireProjectile("GunsmokeSpawner_Small",0,0,-17,-12,FPF_NOAUTOAIM); A_OverlayFlags(7,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(7,STYLE_Add); }
					if(invoker.MachinegunBuffer == 9) { A_Overlay(8,"MachinegunFire3"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 18,-12,FPF_NOAUTOAIM); A_OverlayFlags(8,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(8,STYLE_Add); }
					if(invoker.MachinegunBuffer == 12){ A_Overlay(9,"MachinegunFire4"); A_FireProjectile("GunsmokeSpawner_Small",0,0, 17,-9,FPF_NOAUTOAIM); A_OverlayFlags(9,PSPF_RENDERSTYLE,1); A_OverlayRenderstyle(9,STYLE_Add); invoker.MachinegunBuffer = 0; }
				}
			} else {
				invoker.MachinegunBuffer = 0;
			}
		}
		Loop;
	MachinegunFire1:
		CNQM A 1 Bright A_FireProjectile("BuellerCasingSpawner4",0,0,-14,-5,FPF_NOAUTOAIM);
		Stop;
	MachinegunFire2:
		CNQM B 1 Bright A_FireProjectile("BuellerCasingSpawner4",0,0,-14,-5,FPF_NOAUTOAIM);
		Stop;
	MachinegunFire3:
		CNQM C 1 Bright A_FireProjectile("BuellerCasingSpawner2",0,0,-14,-5,FPF_NOAUTOAIM);
		Stop;
	MachinegunFire4:
		CNQM D 1 Bright A_FireProjectile("BuellerCasingSpawner2",0,0,-14,-5,FPF_NOAUTOAIM);
		Stop;
		
	//Grenade launchers.
	GrenadeLauncherLeft:
		CNQG E 1 {
			if(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { invoker.GrenadeBuffer++; }
			else										  { invoker.GrenadeBuffer = 0; }
			if( CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("GreenMana") >= 12) || (!CountInv("ConquerorMode") && CountInv("GreenMana") >= 10)) && invoker.GrenadeBuffer >= 10) { Return ResolveState("FireGrenadeLauncherLeft"); }
			if(!CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("HellraiserAmmo")) || (!CountInv("ConquerorMode") && CountInv("GrenadeAmmo"))) && invoker.GrenadeBuffer >= 10) { Return ResolveState("FireGrenadeLauncherLeft"); }
			Return ResolveState(Null);
		}
		Loop;
	FireGrenadeLauncherLeft:
		CNQG E 2 {
			A_AlertMonsters();
			invoker.GrenadeBuffer = 0;
			A_Overlay(10,"GrenadeLauncherLeftFlash");
			A_OverlayFlags(10,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(10,STYLE_Add);
			A_QuakeEx(2,2,2,10,0,256,"none",QF_SCALEDOWN);
			A_QuakeEx(2,2,2,10,0,256,"none",QF_SCALEDOWN|QF_WAVE,1.0,1.0,1.5);
			A_FireProjectile("GunsmokeSpawner_Medium",0,0,-8,-9,FPF_NOAUTOAIM);
			if(CountInv("ConquerorMode")) {
				A_FireProjectile("MagnumProjectile",0,0,-13,-9);
				A_StartSound("Magnum/Fire",1,CHANF_OVERLAP,0.7); //A_SpawnItemEx("ConqMagnumSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				if(CountInv("KeepShooting") && random(1,4) == 1) {
					A_SetBlend("Orange",0.15,15);
					ACS_NamedExecuteAlways("Bitching Shot");
				} else {
					if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",12,TIF_NOTAKEINFINITE); }
					else 						 { A_TakeInventory("HellraiserAmmo",1,TIF_NOTAKEINFINITE); }
				}
			} else {
				if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",10,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("GrenadeAmmo",1,TIF_NOTAKEINFINITE); }
				A_StartSound("Patriarch/Fire",1,CHANF_OVERLAP,0.8); A_StartSound("Patriarch/Patriarch",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqGrenadeSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireProjectile("PatriarchProjectile",0,0,-13,-9,FPF_NOAUTOAIM);
			}
			A_SetAngle(angle+1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG E 1   A_OverlayOffset(OverlayID(),-2,2);
		CNQG E 1 { A_OverlayOffset(OverlayID(),-5,5); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG E 1   A_OverlayOffset(OverlayID(),-10,10);
		CNQG E 1 {
			A_OverlayOffset(OverlayID(),-13,13);
			If(CountInv("ConquerorMode")) { A_FireProjectile("BuellerCasingSpawner2",0,0,-7,-6,FPF_NOAUTOAIM); }
			Else { A_FireProjectile("GrenadeCasingSpawnerReversed",0,0,-7,-6,FPF_NOAUTOAIM); }
			Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		}
		CNQG E 1 { A_OverlayOffset(OverlayID(),-12,12); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG E 1   A_OverlayOffset(OverlayID(),-11,11);
		CNQG E 1 { A_OverlayOffset(OverlayID(),-8,8); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG E 1   A_OverlayOffset(OverlayID(),-5,5);
		CNQG E 1 { A_OverlayOffset(OverlayID(),-2,2); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG E 1 {
			A_OverlayOffset(OverlayID(),-1,1);
			if(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) {
				if( CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("GreenMana") >= 12) || (!CountInv("ConquerorMode") && CountInv("GreenMana") >= 10))) { A_Overlay(-11,"FireGrenadeLauncherRight"); }
				if(!CountInv("HexenCounter") && ((CountInv("ConquerorMode") && CountInv("HellraiserAmmo")) || (!CountInv("ConquerorMode") && CountInv("GrenadeAmmo")))) { A_Overlay(-11,"FireGrenadeLauncherRight"); }
			}
		}
		CNQG E 1 { A_OverlayOffset(OverlayID(),-0.5,0.5); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG E 1   A_OverlayOffset(OverlayID(),0,0);
		Goto GrenadeLauncherLeft;
	GrenadeLauncherLeftFlash:
		CNQC A 2 Bright;
		Stop;
		
	GrenadeLauncherRight:
		CNQG D 1;
		Loop;
	FireGrenadeLauncherRight:
		CNQG D 2 {
			A_AlertMonsters();
			A_Overlay(11,"GrenadeLauncherRightFlash");
			A_OverlayFlags(11,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(11,STYLE_Add);
			A_QuakeEx(2,2,2,10,0,256,"none",QF_SCALEDOWN);
			A_QuakeEx(2,2,2,10,0,256,"none",QF_SCALEDOWN|QF_WAVE,1.0,1.0,1.5);
			A_FireProjectile("GunsmokeSpawner_Medium",0,0,8,-9,FPF_NOAUTOAIM);
			if(CountInv("ConquerorMode")) {
				A_FireProjectile("MagnumProjectile",0,0,13,-9);
				A_StartSound("Magnum/Fire",1,CHANF_OVERLAP,0.7); //A_SpawnItemEx("ConqMagnumSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				if(CountInv("KeepShooting") && random(1,4) == 1) {
					A_SetBlend("Orange",0.15,15);
					ACS_NamedExecuteAlways("Bitching Shot");
				} else {
					if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",12,TIF_NOTAKEINFINITE); }
					else 						 { A_TakeInventory("HellraiserAmmo",1,TIF_NOTAKEINFINITE); }
				}
			} else {
				if(CountInv("HexenCounter")) { A_TakeInventory("GreenMana",10,TIF_NOTAKEINFINITE); }
				else 						 { A_TakeInventory("GrenadeAmmo",1,TIF_NOTAKEINFINITE); }
				A_StartSound("Patriarch/Fire",1,CHANF_OVERLAP,0.8); A_StartSound("Patriarch/Patriarch",1,CHANF_OVERLAP,0.8); //A_SpawnItemEx("ConqGrenadeSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
				A_FireProjectile("PatriarchProjectile",0,0,13,-9,FPF_NOAUTOAIM);
			}
			A_SetAngle(angle-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG D 1   A_OverlayOffset(OverlayID(),2,2);
		CNQG D 1 { A_OverlayOffset(OverlayID(),5,5); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG D 1   A_OverlayOffset(OverlayID(),10,10);
		CNQG D 1 {
			A_OverlayOffset(OverlayID(),13,13);
			If(CountInv("ConquerorMode")) { A_FireProjectile("BuellerCasingSpawner4",0,0,7,-6,FPF_NOAUTOAIM); }
			Else { A_FireProjectile("GrenadeCasingSpawner",0,0,7,-6,FPF_NOAUTOAIM); }
			Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		}
		CNQG D 1 { A_OverlayOffset(OverlayID(),12,12); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG D 1   A_OverlayOffset(OverlayID(),11,11);
		CNQG D 1 { A_OverlayOffset(OverlayID(),8,8); Return A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1); }
		CNQG D 1   A_OverlayOffset(OverlayID(),5,5);
		CNQG D 1 { A_OverlayOffset(OverlayID(),2,2); Return A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1); }
		CNQG D 1   A_OverlayOffset(OverlayID(),1,1);
		CNQG D 1 { A_OverlayOffset(OverlayID(),0.5,0.5); Return A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1); }
		CNQG D 1   A_OverlayOffset(OverlayID(),0,0);
		Goto GrenadeLauncherRight;
	GrenadeLauncherRightFlash:
		CNQC B 2 Bright;
		Stop;
	
	//Browning blasters.
	BrowningBlasters:
		TNT1 A 1 A_JumpIf(CountInv("ConquerorUpgrade"),1);
		Loop;
		CNQG H 1 {
			If( CountInv("HexenCounter") && CountInv("BlueMana") && CountInv("GreenMana") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { Return A_Jump(256,1); }
			If(!CountInv("HexenCounter") && CountInv("ThrottleAmmo") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { Return A_Jump(256,1); }
			Return ResolveState(Null);
		}
		Loop;
		CNQG H 2 {
			A_AlertMonsters();
			A_Overlay(12,"BrowningLeftFlash");
			A_OverlayFlags(12,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(12,STYLE_Add);
			if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",1,TIF_NOTAKEINFINITE); A_TakeInventory("GreenMana",1,TIF_NOTAKEINFINITE); }
			else 						 { A_TakeInventory("ThrottleAmmo",1,TIF_NOTAKEINFINITE); }
			A_PlaySound("Browning/Fire",6,0.7); //A_SpawnItemEx("ConqBrowningSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
			A_FireProjectile("BrowningBullet",0,0,-14,0,FPF_NOAUTOAIM);
			A_FireProjectile("GunsmokeSpawner_Small",0,0,-26,-1,FPF_NOAUTOAIM);
			A_FireProjectile("BuellerCasingSpawnerMirror",0,0,-15,-3,FPF_NOAUTOAIM);
			A_SetAngle(angle+0.2 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-0.2 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG H 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"), 1);
		CNQG H 0 {
			If( CountInv("HexenCounter") && CountInv("BlueMana") && CountInv("GreenMana") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { Return A_Jump(256,1); }
			If(!CountInv("HexenCounter") && CountInv("ThrottleAmmo") && GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_OFFHANDATTACK)) { Return A_Jump(256,1); }
			Return ResolveState(Null);
		}
		Loop;
		CNQG H 2 {
			A_AlertMonsters();
			A_Overlay(13,"BrowningRightFlash");
			A_OverlayFlags(13,PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(13,STYLE_Add);
			if(CountInv("HexenCounter")) { A_TakeInventory("BlueMana",1,TIF_NOTAKEINFINITE); A_TakeInventory("GreenMana",1,TIF_NOTAKEINFINITE); }
			else 						 { A_TakeInventory("ThrottleAmmo",1,TIF_NOTAKEINFINITE); }
			A_PlaySound("Browning/Fire",6,0.7); //A_SpawnItemEx("ConqBrowningSounder",0,0,Invoker.Height * 0.5,0,0,0,0,SXF_SETTARGET);
			A_FireProjectile("BrowningBullet",0,0,14,0,FPF_NOAUTOAIM);
			A_FireProjectile("GunsmokeSpawner_Small",0,0,26,-1,FPF_NOAUTOAIM);
			A_FireProjectile("BuellerCasingSpawner",0,0,15,-3,FPF_NOAUTOAIM);
			A_SetAngle(angle-0.2 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(pitch-0.2 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		}
		CNQG H 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"), "BrowningBlasters");
		Loop;
	BrowningLeftFlash:
		CNQU AB 1 Bright;
		Stop;
	BrowningRightFlash:
		CNQU CD 1 Bright;
		Stop;
	}
}

//Main Cannon.
class Conqueror90mmProjectile : FastProjectile
{
	Default
	{
		Radius 8;
		Height 5;
		MissileHeight 8;
		Speed 200;
		Damage (50);
		Projectile;
		MissileType "ThrottleTrail";
		DamageType "Patriarch";
		Renderstyle "Add";
		Decal "BFGScorch";
		Scale 0.35;
	}
	
	States
	{
	Spawn:
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.25, CVF_RELATIVE);
		Loop;
	Death:
		TNT1 A 0 {
			if(CountInv("MasterExploder", AAPTR_TARGET))
			{
				A_SetDamageType("MasteringExplosions");
			}
			A_PlaySound("Explosion/Init",5,0.7);
			A_PlaySound("Explosion/Main",6,0.7);
			A_PlaySound("Explosion/Layer",4,0.7);
			A_PlaySound("Explosion/Flavor",7,0.7);
			A_SpawnItemEx("Patriarch_Main",0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_Explode((120),148);
		}
		TNT1 A 28 A_QuakeEx(3,3,3,12,0,512,"none",QF_SCALEDOWN);
		Stop;
	}
}

//Mortar shot.
class ConquerorMortarUpward : FastProjectile
{
	Default
	{
		Radius 6;
		Height 8;
		Speed 100;
		MissileType "MatriarchTrailSpawner";
		MissileHeight 8;
		Projectile;
		+DONTREFLECT
		+DONTBLAST
		+THRUACTORS
		+FORCEYBILLBOARD
	}
	
	States
	{
	Spawn:
		MRTP A 1;
		Loop;
	Death:
		TNT1 A 1;
		Stop;
	}
}
/*class ConquerorMortarStrikeSpawner : Actor
{
	Default
	{
		+ALWAYSPUFF
		+PUFFONACTORS
		+NOBLOCKMAP
		+SKYEXPLODE
	}
	
	States
	{
	Spawn:
		TNT1 A 43 NoDelay A_SpawnItemEx("ConquerorMortarLockdown",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 25 A_PlaySound("Conqueror/MortarIncoming",5);
		TNT1 A 0 A_SpawnItemEx("ConquerorMortarBombardment",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}*/

class ConquerorMortarStrikeSpawner : FastProjectile
{
	Default
	{
		Radius 8;
		Height 4;
		Projectile;
		Damage 0;
		Speed 300;
		+EXPLODEONWATER
		+NOGRAVITY
		//+THRUACTORS
		+SKYEXPLODE
		+DONTREFLECT
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Loop;
	XDeath:
		TNT1 A 43 A_SpawnItemEx("ConquerorMortarLockdown",6,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 27 A_PlaySound("Conqueror/MortarIncoming",5);
		TNT1 A 0 A_SpawnItemEx("ConquerorMortarBombardment",6,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	Death:
		TNT1 A 43 A_SpawnItemEx("ConquerorMortarLockdown",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 27 A_PlaySound("Conqueror/MortarIncoming",5);
		TNT1 A 0 A_SpawnItemEx("ConquerorMortarBombardment",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}

class ConquerorMortarLockdown : Actor
{
	Default
	{
		ReactionTime 70;
		Renderstyle "Add";
		Scale 1.25;
		Alpha 0.9;
		+NOINTERACTION
		+FLATSPRITE
		+NOCLIP
	}
	
	States
	{
	Spawn:
		PNTR B 1 NoDelay Bright {
			A_Warp(AAPTR_DEFAULT,0,0,0,0,WARPF_ABSOLUTEOFFSET|WARPF_TOFLOOR);
			A_Countdown();
			A_SetScale(Scale.X - 0.05);
			A_FadeOut(0.1);
			Return A_JumpIf(Alpha < 0.3, "Reverse");
		}
		PNTR B 0 A_Stop();
		Loop;
	Reverse:
		PNTR B 1 Bright {
			A_Countdown();
			A_SetScale(Scale.X + 0.05);
			A_FadeIn(0.1);
			Return A_JumpIf(Alpha > 0.9, "Spawn");
		}
		Loop;
	Death:
		PNTR B 1 Bright {
			A_SetScale(Scale.X - 0.2);
			A_FadeOut(0.05);
			Return A_JumpIf(Scale.X <= 0, "Null");
		}
		Loop;
	}
}

class ConquerorMortarBombardment : Actor
{
	Default
	{
		Speed 260;
		Radius 8;
		Height 4;
		Projectile;
		+SPAWNCEILING
		+CEILINGHUGGER
		+DONTBLAST
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_ScaleVelocity(frandom(0.0,1.0));
		TNT1 A 1;
	Death:
		TNT1 A 0 {
			FLineTraceData trace;
			bool success;
			actor bork;

			success = LineTrace(0, 16384, -90, TRF_ThruActors, data:trace);
			
			if(success && (trace.HitType & (trace.TRACE_HitCeiling|trace.TRACE_HasHitSky)))
			{
				bork = Spawn("ConquerorMortarDownward", trace.HitLocation - (0.0, 0.0, GetDefaultByType("ConquerorMortarDownward").height));
				
				if(bork) {
					bork.target = self.target;
					bork.vel.z -= 200;
				}
			}
		}
		Stop;
	}
}

class ConquerorMortarDownward : FastProjectile
{
	Default
	{
		Radius 8;
		Height 4;
		Speed 200;
		DamageFunction (20*random(2,3));
		MissileType "MatriarchTrailSpawner";
		MissileHeight 8;
		DamageType "Patriarch";
		Projectile;
		ProjectileKickback 125;
		Obituary "%o was obliterated by %k's death from above.";
		Gravity 12;
		Scale 0.8;
		-NOGRAVITY
		+DONTREFLECT
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+FORCEYBILLBOARD
	}
	
	int User_Lifespan;
	
	States
	{
	Spawn:
		MRTP B 1;
		Loop;
	Death:
		TNT1 A 0 {
			if(CountInv("MasterExploder", AAPTR_TARGET))
			{
				A_SetDamageType("MasteringExplosions");
			}
		
			A_Stop();
			User_Lifespan = 14;
			
			A_PlaySound("Spikebomb/Explosion",5,0.9);
			A_PlaySound("Conqueror/MortarExplosion",7);
			A_PlaySound("Spikebomb/Far",6,0.8);
			
			//A_SpawnItemEx("SpikebombBurst",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("SpipeMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
			
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN);
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			
			A_Explode(250,364,0,1);
			A_Explode(150,256,1,1);
			
			A_AlertMonsters();
			bEXTREMEDEATH = 0;
		}
	DeathLoop:
		TNT1 A 4 {
			User_Lifespan--;
			A_Explode(20,364,0,1);
			A_Explode(10,256,1,1);
			Return A_JumpIf(User_Lifespan <= 0, 1);
		}
		Loop;
		TNT1 A 6;
		Stop;
	}
}

//Shotguns.
class ConqShotgunSounder : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTONAUTOMAP
	}
	
	int timer;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 35; A_PlaySound("Fleshrend/Fire",5); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

class ConqJusticeSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 45; A_PlaySound("ChromeJustice/Fire",5); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

//Machineguns\Quad Cannon.
class ConqMachinegunSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 45; A_PlaySound("Conqueror/MachinegunFire",5); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

//Grenade Launchers/Magnum shots.
class ConqGrenadeSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 45; A_PlaySound("Patriarch/Fire",5,0.85); A_PlaySound("Patriarch/Add",6,0.85); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

class ConqMagnumSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 45; A_PlaySound("Magnum/Fire",5); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

//Browning Blasters.
class ConqBrowningSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 55; A_PlaySound("Browning/Fire",5); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}

//Mortar.
class ConqMortarSounder : ConqShotgunSounder
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { timer = 45; A_PlaySound("Conqueror/MortarFire",5); A_PlaySound("Conqueror/MortarFire",6); }
		TNT1 A 1 {
			if(target) { Warp(target,2,0,target.height * 0.5,0,WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY); }
			timer--;
			Return A_JumpIf(timer == 0, "Null");
		}
		Wait;
	}
}