class PattySelected : Inventory { Default { Inventory.MaxAmount 1; } }
class PattyUpgrade  : Inventory { Default { Inventory.MaxAmount 1; } }

class PatriarchClip : Ammo
{
	Default
	{
		Inventory.MaxAmount 12;
		Inventory.Icon "PTRGX0";
		+INVENTORY.IGNORESKILL
	}
}

class PatriarchToggler : CustomInventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
		Inventory.PickupMessage "You shouldn't drop this in the first place, dummy.";
		Inventory.Icon "ARTIPTRG";
		Tag "Homing Grenades Toggle";
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
	}
	
	States
	{
	Spawn:
		PTRG A -1;
		Stop;
	Use:
		TNT1 A 0 {
			A_PlaySound("Tinker/Tink",CHAN_AUTO,0.7);
			If(!CountInv("HomingGrenades")) {
				A_Print("\c[white]Homing Grenades\n\c[green]Engaged.",2);
				A_GiveInventory("HomingGrenades",1);
			} else {
				A_Print("\c[white]Homing Grenades\n\c[red]Disengaged.",2);
				A_TakeInventory("HomingGrenades",1);
			}
		}
		Fail;
	}
}

class PatriarchPickup : CustomInventory
{
	Default
	{
		Inventory.PickupSound "misc/w_pkup";
		//Inventory.PickupMessage "Obtained a really damn stylish ''Fleshrend'' sawed-off! Peeling off the skins - multiple enemies at a time! (3)";
	}
	
	States
	{
	Spawn:
		PTRG X -1;
		Stop;
	Pickup:
		TNT1 A 0 {
			if (FindInventory("Patriarch") == NULL) A_GiveInventory("Patriarch");
			//else A_GiveInventory("Patriarch2");
		}
		Stop;
	}
}

//class Patriarch2 : Patriarch {}

class Patriarch : Weapon
{
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive 0;
		Weapon.AmmoGive2 12;
		Weapon.AmmoType "PatriarchClip";
		Weapon.AmmoType2 "GrenadeAmmo";
		Weapon.SlotNumber 5;
		Weapon.SelectionOrder 5;
		Weapon.UpSound "Patriarch/Up";
		Weapon.Kickback 150;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Obtained a ''Patriarch'' type 87 grenade launcher! Bless yourself! (5)";
		Obituary "%o was shown who's %p's daddy, thanks to %k's ''Patriarch''.";
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 1.6;
		Weapon.BobRangeY 0.5;
		Weapon.BobRangeX 0.9;
		+WEAPON.AMMO_CHECKBOTH
		+WEAPON.NOALERT
	}
	
	//Hexen handling.
	override Void AttachToOwner (actor user) {
		if(gameinfo.gametype == Game_HEXEN) {
			AmmoGive2 = 120;
			AmmoType2 = "GreenMana";
		}
		Super.AttachToOwner(user);
	}
	
	States
	{
	Ready:
		PTUU A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRU A 0;
		"####" ABCD 1;
	ReadyMain:
		PTUG A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRG A 0;
		"####" A 0 A_JumpIfInventory("MacheteGoesFast",1,"CaberToss");
		"####" A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Loop;
	Deselect:
		"####" A 0 { 
			A_TakeInventory("PattySelected");
			A_TakeInventory("PowerCrafterTimer");
			A_ZoomFactor(1.0);
		}
		PTUU A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRU A 0;
		"####" DCBA 1;
		TNT1 A 0 SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		TNT1 A 1 A_Lower(18);
		Wait;
	Select:
		TNT1 A 0 A_GiveInventory("PattySelected");
		TNT1 A 0 SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
	HonkaCzongka:
		TNT1 A 1 A_Raise(12);
		Loop;
	Fire:
		"####" A 0 A_JumpIfInventory("PatriarchClip",1,1);
		Goto DryFire;
		"####" A 0
		{
			If (CountInv("PattyUpgrade"))
			{
				A_FireProjectile("PatriarchProjectile2",0,1,6,-5);
				A_PlaySound("Patriarch/Cannon",CHAN_AUTO);
				A_Recoil(0.5);
			}
			Else
			{
				A_FireProjectile("PatriarchProjectile",frandom(0.7,-0.7),1,6,-5,0,frandom(0.35,-0.35));
				A_Recoil(2.0);
			}
		}
	FireAnim:
		PTUF A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRF A 0;
		"####" A 0 {
			A_PlaySound("Patriarch/Fire",CHAN_WEAPON,0.7);
			A_PlaySound("Patriarch/Add",CHAN_AUTO,0.7);
			A_FireProjectile("GunsmokeSpawner_Medium2",0,0,4,0,FPF_NOAUTOAIM);
			A_AlertMonsters();
			A_GunFlash();
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
				A_SetBlend("Blue",0.15,15);
			}
		}
		"####" A 1 Bright {
			If(CountInv("PattyUpgrade"))
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.98); }
				A_SetPitch(pitch-1.0 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
			Else
			{ 
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); }
				A_SetPitch(pitch-2.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
		}
		
		"####" B 1 Bright {
			If(CountInv("PattyUpgrade"))
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.97); }
				A_SetPitch(pitch-0.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
			Else
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.98); }
				A_SetPitch(pitch-1.5 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
		}
		
		PTUT A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRT A 0;
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" A 1 {
			If(CountInv("PattyUpgrade"))
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.98); }
				A_SetPitch(pitch-0.125 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
			Else
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); }
				A_SetPitch(pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
		}
		
		"####" B 1 {
			If(CountInv("PattyUpgrade"))
			{ 
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); }
				A_SetPitch(pitch-0.125 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
			Else
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); }
				A_SetPitch(pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
		}
		
		"####" C 1 {
			A_ZoomFactor(1.0);
			If(CountInv("PattyUpgrade"))
			{
				A_SetPitch(pitch-0.125 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
			Else
			{
				if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(1.0); }
				A_SetPitch(pitch-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			}
		}
		"####" C 0 A_FireProjectile("GrenadeCasingSpawner",0,0,-1,-3,FPF_NOAUTOAIM);
		"####" D 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" EF 1;
		
		PTUG A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRG A 0;
		"####" A 2 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" A 0 A_ReFire();
		Goto ReadyMain;
	AltFire:
		"####" A 0 A_JumpIfInventory("PatriarchClip",1,1);
		Goto DryFire;
		"####" A 0
		{
			If (CountInv("PattyUpgrade"))
			{
				A_FireProjectile("PatriarchBounceProjectile2",0,0,6,-5);
				A_TakeInventory("PatriarchClip", 1, TIF_NOTAKEINFINITE);
				A_PlaySound("Patriarch/Cannon",CHAN_AUTO);
				A_Recoil(0.5);
			}
			Else
			{
				A_FireProjectile("PatriarchBounceProjectile",frandom(0.7,-0.7),0,6,-5,0,0.01*frandom(0.35,-0.35));
				A_TakeInventory("PatriarchClip", 1, TIF_NOTAKEINFINITE);
				A_Recoil(2.0);
			}
		}
		Goto FireAnim;
	DryFire:
		"####" A 0 A_JumpIf(GetCvar("TB_ReloadMode"), "AutoReload");
		PTUD A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRD A 0;
		"####" A 0 A_PlaySound("Patriarch/Dry",CHAN_AUTO,0.9);
		"####" ABCDCBA 1;
		PTUG A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRG A 0;
		"####" A 5;
		Goto ReadyMain;
	AutoReload:
		"####" A 0 A_JumpIfInventory("GrenadeAmmo",1,"Reload");
		Goto DryFire+1;
	DriedToBoot:
		"####" A 0 A_GiveInventory("DryToken",1);
		Goto ReloadMainie;
	Reload:
		"####" A 0 A_JumpIfInventory("PatriarchClip",0,"ReadyMain");
		"####" A 0 A_JumpIfInventory("HexenCounter",1,2);
		"####" A 0 A_JumpIfInventory("GrenadeAmmo",1,2);
		Goto ReadyMain;
		"####" A 0 A_JumpIfInventory("GreenMana",10,1);
		Goto ReadyMain;
	ReloadMain:
		"####" A 0 A_JumpIfInventory("PatriarchClip",1,1);
		Goto DriedToBoot;
	ReloadMainie:
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" BC 1;
		"####" D 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" EF 1;
		"####" G 2;
		
		PTUO A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRO A 0;
		"####" A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" BC 1;
		"####" D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" EF 1 ;
		"####" G 0 A_PlaySound("Patriarch/Out",CHAN_AUTO);
		"####" G 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" HIJ 1;
		"####" K 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" LM 1;
		"####" N 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" N 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" N 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" N 5 A_WeaponReady(WRF_NOFIRE|WRF_NOBOB|WRF_ALLOWZOOM);
		
		PTUI A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRI A 0;
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" BCD 1;
		"####" E 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" FG 1;
		"####" G 0 A_PlaySound("Patriarch/In",CHAN_AUTO);
		"####" H 1;
		"####" I 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" JK 1;
		
		"####" Z 0 {
			if(!CountInv("PattyUpgrade")) {
				A_SpawnItemEx("PatriarchClipDrop",0,0,20);
			} else {
				A_SpawnItemEx("PatriarchClipDrop2",0,0,20);
			}
		}		
		"####" Z 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" Z 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" Z 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" Z 5 A_WeaponReady(WRF_NOFIRE|WRF_NOBOB|WRF_ALLOWZOOM);
		"####" L 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" M 1;
		"####" N 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" O 1;
		"####" P 0 A_PlaySound("Patriarch/In2",CHAN_AUTO);
		"####" P 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" Q 1;
		"####" R 1;
	ReloadWorking:
		"####" A 0 A_JumpIfInventory("HexenCounter",1,"HexenReloadWorking");
		"####" A 0 A_TakeInventory("GrenadeAmmo",1,TIF_NOTAKEINFINITE);
		"####" A 0 A_GiveInventory("PatriarchClip",1);
		"####" A 0 A_JumpIfInventory("PatriarchClip",0,"ReloadFinish");
		"####" A 0 A_JumpIfInventory("GrenadeAmmo",1,"ReloadWorking");
		Goto ReloadFinish;
	HexenReloadWorking:
		"####" A 0 A_TakeInventory("GreenMana",10,TIF_NOTAKEINFINITE);
		"####" A 0 A_GiveInventory("PatriarchClip",1);
		"####" A 0 A_JumpIfInventory("PatriarchClip",0,"ReloadFinish");
		"####" A 0 A_JumpIfInventory("GreenMana",10,"HexenReloadWorking");
	ReloadFinish:
		PTUO A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRO A 0;
		"####" F 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" F 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" F 1;
		"####" F 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		"####" E 1;
		"####" D 1;
		"####" C 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		"####" B 1;
		"####" A 1;
		
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" G 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" F 1;
		"####" E 1;
		"####" D 1;
		"####" C 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		"####" B 1;
		"####" A 1;
		"####" A 0 A_JumpIfInventory("DryToken",1,"Kaczink");
		Goto ReadyMain;
	Kaczink:
		PTUP A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRP A 0;
		"####" A 0 A_TakeInventory("DryToken",1);
		"####" A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" BCD 1;
		"####" E 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" FGH 1;
		"####" I 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" J 1;
		"####" A 0 A_PlaySound("Patriarch/Pull1",CHAN_AUTO,0.9);
		"####" KL 1;
		"####" M 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" NOP 1;
		"####" Q 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" R 1;
		"####" T 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" U 1;
		
		PTUG A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRG A 0;
		"####" A 1;
		Goto ReadyMain;
	Flash:
		TNT1 A 6 A_Light1();
		TNT1 A 8 A_Light2();
		TNT1 A 0 A_Light0();
		Stop;
	Zoom:
		"####" A 0 A_JumpIfInventory("ZoomReFire",1,"PunchDescendants");
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" ACDG 1; // Thanks Pillow! These frames are helpful!
					   // Pillow: Yur welcum
		"####" A 0 A_GiveInventory("ZoomReFire",1);
	PunchDescendants:
		QML1 A 0 {
			A_Overlay(4,"PunchFlash");
			If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
			}
			A_PlaySound("Punch/Swing",CHAN_AUTO,1.0);
			Return A_JumpIf(!CountInv("PowerStrength2"),2);
		}
		FML1 A 0 {
			A_SetBlend("Orange",0.05,10);
			A_PlaySound("Melee/Firepunch",CHAN_AUTO);
		}
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" A 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" B 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" C 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" D 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerStrength2")) {
				A_CustomPunch(90, 1, 0, "FlamePunchCracker", 150 + (CountInv("KineticFist") ? 200 : 0),0.06);
			} Else {
				A_CustomPunch(30, 1, 0, "PunchCracker", 100 + (CountInv("KineticFist") ? 200 : 0));
			}
		}
	PunchContinue:
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" E 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" F 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" G 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" H 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" I 1;
		"####" J 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" K 1;
		TNT1 A 5;
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "PunchDescendants");
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" FDCA 1;
		"####" A 0 A_TakeInventory("ZoomReFire",1);
		Goto ReadyMain;
	PunchFlash:
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" G 1 A_PlaySound("Punch/Swing",CHAN_AUTO,1.0);
		PTUM A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRM A 0;
		"####" ABC 1;
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" BA 1;
		PTUH A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRH A 0;
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" GG 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" GG 1;
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),2);
		"####" GG 1;
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" GG 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" GG 1;
		Stop;
	CaberToss:
		"####" A 1 A_JumpIfInventory("MacheteAmmo",1,1);
		Goto ReadyMain;
		PTUU A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRU A 0;
		"####" DCBA 1;
	CaberMain:
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 0 {
				A_PlaySound("Machete1/Slash",CHAN_WEAPON,0.9);
				A_PlaySound("Machete2/Slash",CHAN_AUTO,0.2);
				If(CountInv("PowerQuadDamage")) {
				A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
			}
		}
		MCHT ABC 1;
		MCHT A 0 {
			A_TakeInventory("MacheteAmmo",1,TIF_NOTAKEINFINITE);
			If(CountInv("PowerStrength2")) {
				If(CountInv("PowerAmmoJunkie")) {
				A_SpawnItemEx("MacheterangBerserkProjectileJunkie",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				} Else {
					A_SpawnItemEx("MacheterangBerserkProjectile",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				}
			} Else {
				If(CountInv("PowerAmmoJunkie")) {
					A_SpawnItemEx("MacheterangProjectileJunkie",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				} Else {
					A_SpawnItemEx("MacheterangProjectile",cos(-pitch)*48,0,32+(sin(-pitch)*48),cos(-pitch)*35,0,sin(-pitch)*35,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				}
			}
		}
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing") || CountInv("BlazingBooster"),1);
		MCHT E 1;
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		MCHT G 1;
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		MCHT I 1;
		TNT1 A 3;
		TNT1 A 0 A_JumpIf(CountInv("MacheteGoesFast") && CountInv("MacheteAmmo"), "CaberMain");

		PTUU A 0 A_JumpIfInventory("PattyUpgrade",1,2);
		PTRU A 0;
		"####" ABCD 1;
		Goto ReadyMain;
	Spawn:
		PTRG X -1;
		Stop;
	}
}

class PatriarchProjectile : Actor
{
	Default
	{
		Radius 10;
		Height 7;
		Speed 40;
		Damage 20;
		Gravity 0.25;
		Obituary "%o was shown who's %p daddy, thanks to %k's ''Patriarch''.";
		Scale 0.75;
		Decal "BFGScorch";
		DamageType "Patriarch";
		Projectile;
		-NOGRAVITY
		+FORCERADIUSDMG
		+SEEKERMISSILE
		+USEBOUNCESTATE
	}
	
	Int User_Patriarch_Flight;
	Int User_Patriarch_Homing;
	
	States
	{
	Spawn:
		PATG B 0 NoDelay {
			A_ChangeVelocity(0, 0, 2.75, CVF_RELATIVE);
			User_Patriarch_Flight = 10;
			If(CountInv("HomingGrenades",AAPTR_TARGET)) {
				User_Patriarch_Homing = 1;
				Return ResolveState("Looplo");
			} Else {
				User_Patriarch_Homing = 0;
			}
			Return ResolveState(Null);
		}
		PATG A 0;
	Looplo:
		"####" "#" 1 {
			If(User_Patriarch_Flight > 0) {
				A_SpawnItemEx("Patriarch_Trail",
					frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(-2.0, 2.0),
					frandom(1.5, -2.5), frandom(-1.0, 1.0), frandom(-1.0, 1.0),
					0, SXF_CLIENTSIDE, 10);
			}
			User_Patriarch_Flight--;
		}
		Loop;
	Bounce:
		"####" "#" 0 {
			If(User_Patriarch_Homing) {
				A_SeekerMissile(70,70,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,2);
			}
		}
		Goto Looplo;
	Death:
		TNT1 A 28 {
			if(CountInv("MasterExploder", AAPTR_TARGET))
			{
				A_SetDamageType("MasteringExplosions");
			}
			A_NoGravity();
			A_PlaySound("Explosion/Init",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Main",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Layer",CHAN_AUTO,0.8);
			A_PlaySound("Explosion/Flavor",CHAN_AUTO,0.8);
			A_SpawnItemEx("Patriarch_Main",0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_Explode(175,148);
			A_QuakeEx(3,3,3,12,0,512,"none",QF_SCALEDOWN);
		}
		Stop;
	}
}

class PatriarchBounceProjectile : PatriarchProjectile
{
	Default
	{
		BounceType "Doom";
		BounceCount 3;
		BounceSound "Patriarch/Bounce";
		+CANBOUNCEWATER
	}
}

class PatriarchProjectile2 : PatriarchProjectile
{
	Default
	{
		Damage 25;
		Speed 70;
	}
	
	States
	{
	Spawn:
		PATG B 0 NoDelay {
			A_ChangeVelocity(0, 0, 2.0, CVF_RELATIVE);
			User_Patriarch_Flight = 10;
			If(CountInv("HomingGrenades",AAPTR_TARGET)) {
				User_Patriarch_Homing = 1;
				Return ResolveState("Looplo");
			} Else {
				User_Patriarch_Homing = 0;
			}
			Return ResolveState(Null);
		}
		PATG A 0;
		Goto Super::Looplo;
	}
}

class PatriarchBounceProjectile2 : PatriarchProjectile
{
	Default
	{
		Damage 25;
		Speed 70;
		BounceType "Doom";
		BounceCount 3;
		BounceSound "Patriarch/Bounce";
		+CANBOUNCEWATER
	}
	
	States
	{
	Spawn:
		PATG B 0 NoDelay {
			A_ChangeVelocity(0, 0, 2.0, CVF_RELATIVE);
			User_Patriarch_Flight = 10;
			If(CountInv("HomingGrenades",AAPTR_TARGET)) {
				User_Patriarch_Homing = 1;
				Return ResolveState("Looplo");
			} Else {
				User_Patriarch_Homing = 0;
			}
			Return ResolveState(Null);
		}
		PATG A 0;
		Goto Super::Looplo;
	}
}

class PatriarchParticle : Actor
{
	Default
	{
		Renderstyle "Add";
		Alpha 0.99;
		+NOINTERACTION
		+FORCEXYBILLBOARD
	}
}

class Patriarch_Cloud : PatriarchParticle
{
	Default
	{
		Alpha 0.65;
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES
	}
	
	int Rolldir;
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				Rolldir = randompick(1,-1);
				A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
							"SpriteE", "SpriteF", "SpriteG", "SpriteH");
			}
		SpriteA:
			CLOD A 0 A_Jump(256, "FadeIn");
		SpriteB:
			CLOD B 0 A_Jump(256, "FadeIn");
		SpriteC:
			CLOD C 0 A_Jump(256, "FadeIn");
		SpriteD:
			CLOD D 0 A_Jump(256, "FadeIn");
		SpriteE:
			CLOD E 0 A_Jump(256, "FadeIn");
		SpriteF:
			CLOD F 0 A_Jump(256, "FadeIn");
		SpriteG:
			CLOD G 0 A_Jump(256, "FadeIn");
		SpriteH:
			CLOD H 0 A_Jump(256, "FadeIn");
		FadeIn:
			"####" "#" 0 Bright A_SetScale(FRandom(1.1, 1.3));
			Goto Idle;
		Idle:
			"####" "#" 2 Bright A_Jump(190, "FadeOut");
			Loop;
		FadeOut:
			"####" "#" 1 Bright {
				A_SetRoll(Roll + (frandom(0.5,4.0) * Rolldir), SPF_INTERPOLATE);
				A_FadeOut(0.03);
				A_SetScale(Scale.X - frandom(0.02, 0.04));
				A_ScaleVelocity(frandom(0.96,1.0));
			}
			Loop;
	}
}

class Patriarch_Smoke : PatriarchParticle
{
	Default
	{
		Alpha 0.0;
		Renderstyle "Translucent";
	}
	
	States
	{
		Spawn:
		    TNT1 A 3;
			TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD");
		SpriteA:
			DYMI A 0 A_Jump(256, "FadeIn");
		SpriteB:
			DYMI B 0 A_Jump(256, "FadeIn");
		SpriteC:
			DYMI C 0 A_Jump(256, "FadeIn");
		SpriteD:
			DYMI D 0 A_Jump(256, "FadeIn");
		FadeIn:
			"####" "#" 0 A_SetScale(frandom(0.3, 0.4));
			Goto RealFadeIn;
		RealFadeIn:
			"####" "#" 1 A_FadeIn(frandom(0.01, 0.03));
			"####" "#" 0 A_JumpIf(Alpha >= 0.35, "Idle");
			Loop;
		Idle:
			"####" "#" 5 A_Jump(200, "FadeOut");
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_FadeOut(FRandom(0.01,0.015));
				A_ScaleVelocity(0.96);
				A_SetScale(Scale.X + FRandom(0.015, 0.025));
			}
			Loop;
	}
}

class Patriarch_Ember : PatriarchParticle
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256, "SpriteA", "SpriteB", "SpriteC",
										 "SpriteD", "SpriteE", "SpriteF");
		SpriteA:
			EMBR A 0 A_Jump(256, "FadeIn");
		SpriteB:
			EMBR B 0 A_Jump(256, "FadeIn");
		SpriteC:
			EMBR C 0 A_Jump(256, "FadeIn");
		SpriteD:
			EMBR D 0 A_Jump(256, "FadeIn");
		SpriteE:
			EMBR E 0 A_Jump(256, "FadeIn");
		SpriteF:
			EMBR F 0 A_Jump(256, "FadeIn");
		FadeIn:
			"####" "#" 0 Bright A_SetScale(frandom(0.035, 0.055));
			Goto Idle;
		Idle:
			"####" "#" 2 Bright A_Jump(200, "FadeOut");
			Loop;
		FadeOut:
			"####" "#" 1 Bright {
				A_Weave(frandom(0.9, 1.0), frandom(0.9, 1.0),
						frandom(70.0, 90.0), frandom(70.0, 90.0));
				A_ChangeVelocity(Vel.X * frandom(0.93, 0.99),
								 Vel.Y * frandom(0.93, 0.99),
								 Vel.Z - frandom(0.1, 0.2),
								 CVF_REPLACE);
				A_SetScale(Scale.X - frandom(0.003, 0.0015));
				Return A_JumpIf(Scale.X <= 0.0, "Null");
			}
			Loop;
	}
}

class Patriarch_Shockwave : PatriarchParticle
{
	Default
	{
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			SHCK A 1 Bright {
				A_SetScale(Scale.X + FRandom(0.15, 0.2));
				A_FadeOut(0.1);
			}
			Loop;
	}
}

class Patriarch_Flare : PatriarchParticle
{
	Default
	{
		Scale 2.7;
	}
	
	States
	{
		Spawn:
			FLER A 1 Bright {
				A_FadeOut(0.03);
				A_SetScale(Scale.X - frandom(0.05, 0.12));
				Return A_JumpIf(Scale.X <= 0.0, "Null");
			}
			Loop;
	}
}

class Patriarch_Blast : PatriarchParticle
{
	Default
	{
		Scale 0.4;
		Alpha 0.9;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD",
										 "SpriteE", "SpriteF", "SpriteG", "SpriteH");
		SpriteA:
			BLAS A 0 A_Jump(256, "FadeIn");
		SpriteB:
			BLAS B 0 A_Jump(256, "FadeIn");
		SpriteC:
			BLAS C 0 A_Jump(256, "FadeIn");
		SpriteD:
			BLAS D 0 A_Jump(256, "FadeIn");
		SpriteE:
			BLAS E 0 A_Jump(256, "FadeIn");
		SpriteF:
			BLAS F 0 A_Jump(256, "FadeIn");
		SpriteG:
			BLAS G 0 A_Jump(256, "FadeIn");
		SpriteH:
			BLAS H 0 A_Jump(256, "FadeIn");
		FadeIn:
			"####" "#" 1 Bright {
				A_FadeOut(0.04);
				A_SetScale(Scale.X + FRandom(0.07, 0.09));
			}
			Loop;
	}
}

class Patriarch_Impact : Actor
{
	Default
	{
		+NOINTERACTION
	}
	
	Int User_Toaster;
	Int User_TimeCount;
	Int User_SpawnCount;
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay { User_TimeCount = 17; User_Toaster = 0; }
		Emit:
			TNT1 A 1;
			TNT1 A 0 {
				If(GetCvar("TB_SmokeReduction") >= 2) { User_SpawnCount = 1; }
				If(GetCvar("TB_SmokeReduction") == 1) { User_SpawnCount = 2; }
				Else { User_SpawnCount = 4; }
				For(int Sosig = User_SpawnCount; Sosig > 0; Sosig--) {
					A_SpawnItemEx("Patriarch_Cloud", frandom(-10.0, 10.0),
						frandom(-10.0, 10.0), frandom(-5.0, 10.0),
						frandom(-2.0, 2.0), frandom(1.0, 3.0),
						frandom(1.0, 2.5) * randompick(1,-1), frandom(0.0,360.0), SXF_CLIENTSIDE, 64);
				}
				If(GetCvar("TB_SmokeReduction") >= 2) {User_SpawnCount = 1; User_Toaster = 164; }
				Else If(GetCvar("TB_SmokeReduction") == 1) { User_SpawnCount = 1; }
				Else { User_SpawnCount = 2; }
				For(int Sosig = User_SpawnCount; Sosig > 0; Sosig--) {
					A_SpawnItemEx("Patriarch_Smoke", frandom(-25.0, 25.0),
						frandom(-25.0, 25.0), frandom(-25.0, 25.0),
						frandom(2.0, -1.0), frandom(-0.9, 0.9),
						frandom(-0.9, 0.9), frandom(0.0,360.0), SXF_CLIENTSIDE, 64 + User_Toaster);
					A_SpawnItemEx("Patriarch_Ember", frandom(-20.0, 20.0),
						frandom(-20.0, 20.0), frandom(-20.0, 20.0),
						frandom(-2.0, -8.0), frandom(-6.0, 6.0),
						frandom(1.0, 5.0), frandom(0.0,360.0), SXF_CLIENTSIDE, 24 + User_Toaster);
				}
				User_TimeCount--;
				Return A_JumpIf(User_TimeCount, "Emit");
			}
			Stop;
	}
}

class Patriarch_Main : Actor
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			A_SpawnItemEx("Patriarch_Impact",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("Patriarch_Blast",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("Patriarch_Flare",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_SpawnItemEx("Patriarch_Shockwave",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
		}
		Stop;
	}
}

class Patriarch_Smoke2 : Patriarch_Smoke
{
	States
	{
		Spawn:
		    TNT1 A 3;
			TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD");
		SpriteA:
			DYMI E 0 A_Jump(256, "FadeIn");
		SpriteB:
			DYMI F 0 A_Jump(256, "FadeIn");
		SpriteC:
			DYMI G 0 A_Jump(256, "FadeIn");
		SpriteD:
			DYMI H 0 A_Jump(256, "FadeIn");
	}
}

class Patriarch_Trail : Patriarch_Smoke2
{
	States
	{
		FadeIn:
			"####" "#" 0 A_SetScale(frandom(0.2, 0.3));
			Goto RealFadeIn;
		RealFadeIn:
			"####" "#" 1 {
				A_FadeIn(frandom(0.02, 0.05));
				A_SetScale(Scale.X + frandom(0.01,0.02));
				Return A_JumpIf(Alpha >= 0.2, "Idle");
			}
			Loop;
		Idle:
			"####" "#" 5 A_Jump(200, "FadeOut");
			Loop;
		FadeOut:
			"####" "#" 1 {
				A_FadeOut(frandom(0.03,0.04));
				A_ScaleVelocity(0.96);
				A_SetScale(Scale.X + frandom(0.015, 0.025));
			}
			Loop;
	}
}