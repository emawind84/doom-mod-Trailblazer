class ThrottleSelected : Inventory { Default { Inventory.MaxAmount 1; } }
class ThrottleUpgrade : ThrottleSelected {}

class ThrottleCycle : Inventory { Default { Inventory.MaxAmount 8; } } //Firing cycles.
class BrowningCycle : Inventory { Default { Inventory.MaxAmount 3; } }

class SlowRideMinigun : Inventory { Default { Inventory.MaxAmount 2; } } // The item to slow you for having in the BLAZING script.

class Skullthrottle : TrailblazerWeapon replaces PlasmaRifle
{
	Default
	{
		//Health 3;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 100;
		Weapon.AmmoType "ThrottleAmmo";
		Weapon.AmmoType2 "ThrottleAmmo";
		Weapon.SlotNumber 6;
		Weapon.SelectionOrder 4;
		Weapon.UpSound "Throttle/Up";
		Weapon.Kickback 125;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Obtained an Ironworks-T800 ''Skullthrottle'' minigun! Now you won't have time to bleed. (6)";
		Obituary "%o didn't quite make through %k's ''Skullthrottle'' bullet storm.";
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 1.4;
		Weapon.BobRangeY 0.5;
		Weapon.BobRangeX 1.1;
		Scale 1.1;
		+WEAPON.NOALERT
		+WEAPON.TWOHANDED
	}
	
	int gibberish;
	
	//Gun drop
	override void PostBeginPlay()
	{
		if(!bDROPPED && TB_NoCrafting <= 0)
		{
			A_DropItem("PaintrainBlueprintBringer",-1,64);
		}
		Super.PostBeginPlay();
		Return;
	}
	
	//Hexen handling.
	override Void AttachToOwner (actor user) {
		if(gameinfo.gametype == Game_HEXEN) {
			AmmoGive1 = 50;
			AmmoType1 = "BlueMana";
			AmmoGive2 = 50;
			AmmoType2 = "GreenMana";
			bPRIMARY_USES_BOTH = 1;
			bALT_USES_BOTH = 1;
		}
		Super.AttachToOwner(user);
	}
	
	States
	{
	Ready:
		CHNU A 0 {
			If(CountInv("ThrottleUpgrade")) {
				A_Overlay(2,"BrowningEnter",GFF_NOEXTCHANGE);
				A_Overlay(-3,"ThrottleEnter",GFF_NOEXTCHANGE);
			}
		}
		CHNU ABCD 1;
	ReadyMain:
		CHNG A 0 A_JumpIfInventory("ThrottleUpgrade",1,"ReadyMain2");
		CHNG A 0 A_JumpIf(CountInv("MacheteGoesFast") && CountInv("MacheteAmmo"), "CaberToss");
		CHNG A 1 A_WeaponReady(WRF_ALLOWZOOM);
		Loop;
	ReadyMain2:
		// Well, without this one, once you upgrade the gun and have it selected, you'll get!... nothing.
		// Also will lose them during level transition. So this is dumb way to handle it, but if it works, it ain't stupid.
		CHNG A 0 {
			If(CountInv("ThrottleUpgrade")) {
				A_Overlay(2,"BrowningIdle",GFF_NOEXTCHANGE);
				A_Overlay(-3,"ThrottleIdle",GFF_NOEXTCHANGE);
			}
		}
		TNT1 A 1 A_WeaponReady();
		Loop;
	Deselect:
		TNT1 A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("ThrottleSelected");
			A_TakeInventory("PowerCrafterTimer");
			A_TakeInventory("SlowRideMinigun",2);
			A_TakeInventory("ThrottleCycle",8);
		}
		CHNU A 0 {
			if(CountInv("ThrottleUpgrade")) {
			A_Overlay(2,"BrowningOut");
			A_Overlay(-3,"none");
			}
		}
		CHNU DCBA 1;
		TNT1 A 0 {
			A_StopSound(1);
			A_StopSound(CHAN_AUTO);
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 1 A_Lower(18);
		Wait;
	Select:
		TNT1 A 0 {
			A_GiveInventory("ThrottleSelected");
			invoker.gibberish = 0;
		}
		TNT1 A 0 SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
		TNT1 A 1 A_Raise(12);
		Loop;
	Fire:
		CHNG A 0 A_JumpIfInventory("ThrottleUpgrade",1,"ReadyMain2");
		CHNG A 0 A_JumpIfInventory("ThrottleInstaspin",1,"ToastMcFire");
		CHNG A 0 A_PlaySound("Throttle/WindUp",CHAN_AUTO,0.8);
		CHNG GFEDCBA 1 A_AlertMonsters();
		CHNG A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),5);
		CHNG GECA 1;
		CHNG A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),5);
		CHNG GECA 1;
		CHNG A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),5);
		CHNG GECA 1;
		CHNG GECAGECA 1 A_AlertMonsters();
		CHNG A 0 A_JumpIfNoAmmo("NoMoreMangling");
		Goto ToastMcFire;
	ToastMcFire:
		CHNG A 0 A_GiveInventory("SlowRideMinigun", 1);
	ToastMcReFire:
		CHNF A 0 {
			A_PlaySound("Throttle/Fire",CHAN_WEAPON,0.8,1);
			A_PlaySound("Throttle/Add",CHAN_AUTO,0.9,1);
			if(GetCvar("TB_QuakeRecoil")) { A_QuakeEx(2,2,2,8,0,2,"none",QF_SCALEDOWN); }
			If(CountInv("ThrottleCycle") >= 8) //If the animator had reached the full cycle at this moment, reset it.
			{
				A_TakeInventory("ThrottleCycle",8);
			}
		}
		CHNF A 0
		{
			If(GetCvar("TB_MinigunMode") == 2)
			{
				A_StartSound("Throttle/RocknRoll",5,CHANF_LOOPING|CHANF_OVERLAP,0.8);
				Return ResolveState(Null);
			}
			Else If(GetCvar("TB_MinigunMode") == 1)
			{
				invoker.gibberish++;
				if(invoker.gibberish >= 7) {
					if(random(0,1) == 0) {
						invoker.gibberish = 0;
						A_StartSound("Redneck/Gibberish",8,0,1.0);
						Return ResolveState(Null);
					}
				}
			}
			Return ResolveState(Null);
		}
		
		CHNF A 0 A_JumpIfNoAmmo("NoMoreMangling");
		CHNF A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"), 2);
		CHNF A 0 A_Jump(256,2);
		CHNF AA 0
		{
			If(CountInv("ThrottleCycle") % 2 == 0)
			{
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),1,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				Return ResolveState(Null);
			}
			Else
			{
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				Return ResolveState(Null);
			}
			Return ResolveState(Null);
		}
		CHNF A 0 {
			A_AlertMonsters();
			A_GunFlash();
			A_GiveInventory("ThrottleCycle",1);
			A_Recoil(0.2);
			A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM);
			A_FireProjectile("BuellerCasingSpawner",0,0,4,-7,FPF_NOAUTOAIM);
			A_SetAngle(Angle-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.35 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			If(CountInv("PowerQuadDamage") && CountInv("ThrottleCycle") == 4) {
				A_StartSound("QuadDamage/Fire", 8);
				A_SetBlend("Blue",0.05,8);
			}
		}
		Goto FireAnim;
	FireAnim:
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 8,"FireAnimH");  //Probably the intelligent way would be to make it simply jump one
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 7,"FireAnimG");  //frame further depending on the counter... but I am not an intelligent man.
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 6,"FireAnimF");
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 5,"FireAnimE");
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 4,"FireAnimD");
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 3,"FireAnimC");
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 2,"FireAnimB");
		CHNF A 0 A_JumpIf(CountInv("ThrottleCycle") == 1,"FireAnimA");
	FireAnimA:
		CHNF A 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); } }
		Goto FireAnimCont;
	FireAnimB:
		CHNF B 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto FireAnimCont;
	FireAnimC:
		CHNF C 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.985); } }
		Goto FireAnimCont;
	FireAnimD:
		CHNF D 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto FireAnimCont;
	FireAnimE:
		CHNF E 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); } }
		Goto FireAnimCont;
	FireAnimF:
		CHNF F 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto FireAnimCont;
	FireAnimG:
		CHNF G 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.985); } }
		Goto FireAnimCont;
	FireAnimH:
		CHNF H 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto FireAnimCont;
	FireAnimCont:
		"####" "#" 1 Bright;
		"####" "#" 0 A_ReFire("ToastMcReFire");
		"####" "#" 0 A_JumpIf(CountInv("ThrottleCycle") < 8, "ToastMcReFire"); //Uncomment this if you want crazy gun control.
		Goto WindDownAfterFire;
	NoMoreMangling:
		CHNG A 0 {
			A_ZoomFactor(1.0);
			A_PlaySound("Throttle/Dry",CHAN_WEAPON,0.8,1);
			A_TakeInventory("SlowRideMinigun", 1);
			A_TakeInventory("ThrottleCycle", 8);
			A_StopSound(CHAN_AUTO);
		}
		CHNG GECAGECAGECAGECA 1 A_AlertMonsters();
		CHNG A 0 A_ReFire("ToastMcReFire");
		Goto WindDown;
	WindDownAfterFire:
		CHNE A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("SlowRideMinigun", 1);
			A_TakeInventory("ThrottleCycle", 8);
			A_StopSound(CHAN_AUTO);
			A_PlaySound("Throttle/WindDown",CHAN_WEAPON,0.8);
		}
		CHNE CBA 1 { A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM); A_ReFire("ToastMcFire"); }
		CHNG GECAGECAG 1 { A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM); A_ReFire("ToastMcFire"); }
		CHNG EDCBAGFEDCBA 1 A_ReFire("ToastMcFire");
		CHNG GFEDCBBAAGGFFEEEDDDCCCBBBAAAGGGGFFFFEEEEDDDDDCCCCCBBBBBBBAAAAAAAA 1 A_WeaponReady(WRF_ALLOWZOOM);
		Goto ReadyMain;
	WindDown:
		CHNG A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("SlowRideMinigun", 1);
			A_TakeInventory("ThrottleCycle", 8);
			A_StopSound(CHAN_AUTO);
			A_PlaySound("Throttle/WindDown",CHAN_WEAPON,0.8);
		}
		CHNG GECAGECAGECA 1 A_ReFire("ToastMcFire");
		CHNG EDCBAGFEDCBA 1 A_ReFire("ToastMcFire");
		CHNG GFEDCBBAAGGFFEEEDDDCCCBBBAAAGGGGFFFFEEEEDDDDDCCCCCBBBBBBBAAAAAAAA 1 A_WeaponReady(WRF_ALLOWZOOM);
		Goto ReadyMain;
	
	//Browning (Left)
	BrowningEnter:
		BRWU ABCD 1;
		Goto BrowningIdle;
	BrowningOut:
		BRWU DCBA 1;
		Stop;
	BrowningIdle:
		BRWG A 1;
		BRWG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (invoker.bOFFHANDWEAPON ? BT_ATTACK : BT_OFFHANDATTACK), "BrowningFire");
		BRWG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "Punch");
		Loop;
	BrowningFire:
		BRWG A 0 {
			if(CountInv("HexenCounter") &&
			   CountInv("BlueMana") >= 3 &&
			   CountInv("GreenMana")  >= 3) {
				Return A_Jump(256,2);
			}
			else if(!CountInv("HexenCounter") &&
					 CountInv("ThrottleAmmo") >= 3) {
				Return A_Jump(256,2);
			}
			Return ResolveState(Null);
		}
		BRWG A 0 A_TakeInventory("SlowRideMinigun",1);
		Goto BrowningIdle;
		BRWF A 0 A_GiveInventory("SlowRideMinigun",1);
	BrowningReFire:
		BRWF A 0 {
			A_PlaySound("Browning/Fire",CHAN_AUTO,0.9);
			if(GetCvar("TB_QuakeRecoil")) { A_QuakeEx(2,2,1,4,0,2,"none",QF_SCALEDOWN); }
			A_AlertMonsters();
			A_GiveInventory("BrowningCycle",1);
			A_FireProjectile("GunsmokeSpawner_Large",0,0,-6,-1,FPF_NOAUTOAIM);
			A_FireProjectile("BrowningBullet",frandom(2.0,-2.0),1,-6,-5,FPF_NOAUTOAIM,frandom(1.0,-1.0));
			If(CountInv("PowerQuadDamage")) {
				A_StartSound("QuadDamage/Fire", 8);
				A_SetBlend("Blue",0.05,8);
			}
		}
		BRWF A 1 Bright {
			A_SetPitch(Pitch-0.35 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); }
		}
		BRWF B 1 Bright {
			A_SetPitch(Pitch-0.2 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); }
		}
		BRWG B 0 {
			A_FireProjectile("BuellerCasingSpawnerMirror",0,0,-4,-7,FPF_NOAUTOAIM);
			if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.9975); }
		}
		BRWG B 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		
		CHNF A 0 A_JumpIfNoAmmo("BrowningEnd");
		BRWG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (invoker.bOFFHANDWEAPON ? BT_ATTACK : BT_OFFHANDATTACK), "BrowningReFire");
		BRWG A 0 A_JumpIf(CountInv("BrowningCycle") < 3, "BrowningReFire");
	BrowningEnd:
		BRWG A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("BrowningCycle",3);
			A_TakeInventory("SlowRideMinigun",1);
		}
		BRWG CD 1;
		Goto BrowningIdle;
		

	//Throttle (Right)
	ThrottleEnter:
		TNT1 A 4;
		Goto ThrottleIdle;
	ThrottleIdle:
		CH2G A 1;
		CH2G A 0 A_JumpIf(CountInv("MacheteGoesFast") && CountInv("MacheteAmmo"), "CaberToss");
		CH2G A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (invoker.bOFFHANDWEAPON ? BT_OFFHANDATTACK : BT_ATTACK), "ThrottleFire");
		Loop;
	ThrottleFire:
		CH2G A 0 A_JumpIfInventory("ThrottleInstaspin",1,"ThrottleMcFire");
		CH2G A 0 A_PlaySound("Throttle/WindUp",CHAN_AUTO,0.8);
		CH2G GFEDCBA 1 A_AlertMonsters();
		CH2G A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),5);
		CH2G GECA 1;
		CH2G A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),5);
		CH2G GECA 1;
		CH2G A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),5);
		CH2G GECA 1;
		CH2G GECAGECA 1 A_AlertMonsters();
		CH2G A 0 A_JumpIfNoAmmo("ThrottleNoMoreMangling");
		Goto ThrottleMcFire;
	ThrottleMcFire:
		CH2G A 0 A_GiveInventory("SlowRideMinigun", 1);
	ThrottleMcReFire:
		CH2F A 0 A_JumpIfNoAmmo("ThrottleNoMoreMangling");
		CH2F A 0 {
			A_PlaySound("Throttle/Fire",CHAN_WEAPON,0.8,1);
			A_PlaySound("Throttle/Add",CHAN_AUTO,0.9,1);
			if(GetCvar("TB_QuakeRecoil")) { A_QuakeEx(2,2,2,8,0,2,"none",QF_SCALEDOWN); }
			If(CountInv("ThrottleCycle") >= 8) //If the animator had reached the full cycle at this moment, reset it.
			{
				A_TakeInventory("ThrottleCycle",8);
			}
		}
		CH2F A 0
		{
			If(GetCvar("TB_MinigunMode") == 2)
			{
				A_StartSound("Throttle/RocknRoll",5,CHANF_LOOPING|CHANF_OVERLAP,0.8);
				Return ResolveState(Null);
			}
			Else If(GetCvar("TB_MinigunMode") == 1)
			{
				invoker.gibberish++;
				if(invoker.gibberish >= 7) {
					if(random(0,1) == 0) {
						invoker.gibberish = 0;
						A_StartSound("Redneck/Gibberish",8,0,1.0);
						Return ResolveState(Null);
					}
				}
			}
			Return ResolveState(Null);
		}
		
		CH2F A 0 A_JumpIfNoAmmo("ThrottleNoMoreMangling");
		CH2F A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"), 2);
		CH2F A 0 A_Jump(256,2);
		CH2F AA 0
		{
			If(CountInv("ThrottleCycle") % 2 == 0)
			{
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),1,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				Return ResolveState(Null);
			}
			Else
			{
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				A_FireProjectile("ThrottleBullet",frandom(3.0,-3.0),0,6,-5,FPF_NOAUTOAIM,frandom(1.5,-1.5));
				Return ResolveState(Null);
			}
			Return ResolveState(Null);
		}
		CH2F A 0 {
			A_AlertMonsters();
			A_GunFlash();
			A_GiveInventory("ThrottleCycle",1);
			A_Recoil(0.2);
			A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM);
			A_FireProjectile("BuellerCasingSpawner",0,0,4,-7,FPF_NOAUTOAIM);
			A_SetAngle(Angle-0.25 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch-0.35 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
			If(CountInv("PowerQuadDamage") && CountInv("ThrottleCycle") == 4) {
				A_StartSound("QuadDamage/Fire", 8);
				A_SetBlend("Blue",0.05,8);
			}
		}
		Goto ThrottleFireAnim;
	ThrottleFireAnim:
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 8,"ThrottleFireAnimH");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 7,"ThrottleFireAnimG");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 6,"ThrottleFireAnimF");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 5,"ThrottleFireAnimE");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 4,"ThrottleFireAnimD");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 3,"ThrottleFireAnimC");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 2,"ThrottleFireAnimB");
		CH2F A 0 A_JumpIf(CountInv("ThrottleCycle") == 1,"ThrottleFireAnimA");
	ThrottleFireAnimA:
		CH2F A 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimB:
		CH2F B 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimC:
		CH2F C 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.985); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimD:
		CH2F D 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimE:
		CH2F E 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.995); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimF:
		CH2F F 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimG:
		CH2F G 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.985); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimH:
		CH2F H 0 { if(GetCvar("TB_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		Goto ThrottleFireAnimCont;
	ThrottleFireAnimCont:
		"####" "#" 1 Bright;
		"####" "#" 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (invoker.bOFFHANDWEAPON ? BT_OFFHANDATTACK : BT_ATTACK), "ThrottleMcReFire");
		"####" "#" 0 A_JumpIf(CountInv("ThrottleCycle") < 8, "ThrottleMcReFire"); //Uncomment this if you want crazy gun control.
		Goto ThrottleAfterFire;
	ThrottleNoMoreMangling:
		CH2G A 0 {
			A_ZoomFactor(1.0);
			A_PlaySound("Throttle/Dry",CHAN_WEAPON,0.8,1);
			A_TakeInventory("SlowRideMinigun", 1);
			A_TakeInventory("ThrottleCycle", 8);
			A_StopSound(CHAN_AUTO);
		}
		CH2G GECAGECAGECAGECA 1 A_AlertMonsters();
		CH2G A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ALTATTACK), "ThrottleMcReFire");
		Goto ThrottleWindDown;
  ThrottleAfterFire:
	CH2G A 0 {
		A_ZoomFactor(1.0);
		A_TakeInventory("SlowRideMinigun", 1);
		A_TakeInventory("ThrottleCycle", 8);
		A_StopSound(CHAN_AUTO);
		A_PlaySound("Throttle/WindDown",CHAN_WEAPON,0.8);
	}
    CH2E CBA 1 { A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM); Return A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleMcFire"); }
	CH2G GECAGECAG 1 { A_FireProjectile("GunsmokeSpawner_Large",0,0,6,-1,FPF_NOAUTOAIM); Return A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleMcFire"); }
	CH2G FEDCBAGFEDCBA 1  A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleMcFire");
    CH2G GFEDCBBAAGGFFEEEDDDCCCBBBAAAGGGGFFFFEEEEDDDDDCCCCCBBBBBBBAAAAAAAA 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleFire");
	Goto ThrottleIdle;
  ThrottleWindDown:
	CH2G A 0 {
		A_ZoomFactor(1.0);
		A_TakeInventory("SlowRideMinigun", 1);
		A_TakeInventory("ThrottleCycle", 8);
		A_StopSound(CHAN_AUTO);
		A_PlaySound("Throttle/WindDown",CHAN_WEAPON,0.8);
	}
    CH2G GECAGECAGECA 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleMcFire");
	CH2G GFEDCBAGECBA 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleMcFire");
	CH2G GFEDCBBAAGGFFEEEDDDCCCBBBAAAGGGGFFFFEEEEDDDDDCCCCCBBBBBBBAAAAAAAA 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThrottleFire");
	Goto ThrottleIdle;
	Flash:
		TNT1 A 1 A_Light2();
		TNT1 A 8 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;
	Punch:
	Zoom:
		CHNU A 0 A_JumpIfInventory("ThrottleUpgrade",1,2);
		CHNU A 0 A_Jump(256,2);
		BRWU A 0;
		"####" DCBA 1;
	PunchSkulls:
		QML1 A 0 {
			If(CountInv("PowerQuadDamage")) {
				A_StartSound("QuadDamage/Fire", 8);
			}
			A_PlaySound("Punch/Swing",CHAN_AUTO,1.0);
			Return A_JumpIf(!CountInv("PowerStrength2"),2);
		}
		FML1 A 0 {
			A_SetBlend("Orange",0.05,10);
			A_PlaySound("Melee/Firepunch",CHAN_AUTO);
		}
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2);
		"####" A 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" B 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" C 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" D 1 A_SetPitch(pitch-0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerStrength2")) {
				A_CustomPunch(90, 1, 0, "FlamePunchCracker", 150 + (CountInv("KineticFist") ? 200 : 0),0.06);
			} Else {
				A_CustomPunch(30, 1, 0, "PunchCracker", 100 + (CountInv("KineticFist") ? 200 : 0));
			}
		}
  PunchContinue:
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" E 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" F 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2);
		"####" G 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" H 1 A_SetPitch(pitch+0.3 * GetCvar("TB_WeaponRecoil"), SPF_INTERPOLATE);
		"####" A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		"####" I 1;
		"####" J 1;
		"####" A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		"####" K 1;
		TNT1 A 5;
		CHNU A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ZOOM), "PunchSkulls");
		BRWU A 0 A_JumpIfInventory("ThrottleUpgrade",1,2);
		CHNU A 0;
		"####" ABCD 1;
		CHNU A 0 A_JumpIfInventory("ThrottleUpgrade",1,"BrowningIdle");
		Goto ReadyMain;
	PunchFlash:
		TNT1 A 1;
		TNT1 A 3;
		TNT1 A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2);
		TNT1 AA 1;
		TNT1 A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		TNT1 AA 1;
		TNT1 A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		TNT1 AA 1;
		TNT1 A 0 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),2);
		TNT1 AA 1;
		TNT1 A 0 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),2);
		TNT1 AA 1;
		TNT1 A 0 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),2);
		TNT1 AA 1;
		Stop;
	CaberToss:
		CHNU DCBA 1;
	CaberMain:
		TNT1 A 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		TNT1 A 1;
		TNT1 A 0 {
			A_PlaySound("Machete1/Slash",CHAN_WEAPON,0.9);
			A_PlaySound("Machete2/Slash",CHAN_AUTO,0.2);
			If(CountInv("PowerQuadDamage")) {
				A_StartSound("QuadDamage/Fire", 8);
			}
		}
		MCHT ABC 1;
		MCHT A 0 {
			A_TakeInventory("MacheteAmmo",1,TIF_NOTAKEINFINITE);
			If(CountInv("PowerStrength2")) {
				If(CountInv("PowerAmmoJunkie")) {
				A_SpawnItemEx("MacheterangBerserkProjectileJunkie", 48, 0, 0, 35, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_RELATIVETOWEAPON);
				} Else {
					A_SpawnItemEx("MacheterangBerserkProjectile", 48, 0, 0, 35, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_RELATIVETOWEAPON);
				}
			} Else {
				If(CountInv("PowerAmmoJunkie")) {
					A_SpawnItemEx("MacheterangProjectileJunkie", 48, 0, 0, 35, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_RELATIVETOWEAPON);
				} Else {
					A_SpawnItemEx("MacheterangProjectile", 48, 0, 0, 35, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_RELATIVETOWEAPON);
				}
			}
		}
		MCHT D 1 A_JumpIf(Health <= 75 || CountInv("PowerBlazing")  || CountInv("BlazingBooster"),1);
		MCHT E 1;
		MCHT F 1 A_JumpIf(Health <= 50 || CountInv("PowerBlazing"),1);
		MCHT G 1;
		MCHT H 1 A_JumpIf(Health <= 25 || CountInv("PowerBlazing"),1);
		MCHT I 1;
		TNT1 A 3;
		TNT1 A 0 A_JumpIf(CountInv("MacheteGoesFast") && CountInv("MacheteAmmo"), "CaberMain");
		
		CHNU ABCD 1;
		CHNU A 0 A_JumpIfInventory("ThrottleUpgrade",1,"ThrottleIdle");
		Goto ReadyMain;
	Spawn:
		CHNG X -1;
		Stop;
	}
}

class ThrottleBullet : FastProjectile
{
	Default
	{
		Radius 7;
		Height 5;
		MissileHeight 8;
		Speed 200;
		DamageFunction (4*random(1,5));
		Renderstyle "Add";
		Obituary "%o didn't make through %k's ''Skullthrottle'' bullet storm.";
		Scale 0.5;
		//MissileType "ThrottleTrail";
		Decal "BulletChip3";
		Projectile;
		+NOGRAVITY
		+FORCERADIUSDMG
		+BLOODSPLATTER
	}
	
	States
	{
	Spawn:
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.25, CVF_RELATIVE);
		Loop;
	Death:
		TNT1 A 0 {
			A_Explode(5*random(1,5),24,0);
			A_SpawnItemEx("BuellerPuff");
		}
		Stop;
	XDeath:
		TNT1 A 0;
		Stop;
	}
}

class BrowningBullet : ThrottleBullet
{
	Default
	{
		Radius 9;
		Height 7;
		MissileHeight 8;
		Speed 250;
		DamageFunction (9*random(1,5));
		Obituary "%o was nailed by %k's ''Browning'' bullet.";
		Scale 0.75;
	}
	
	States
	{
	Spawn:
		TRAC A 1 Bright A_ChangeVelocity(0, 0, -0.25, CVF_RELATIVE);
		Loop;
	Death:
		TNT1 A 0 {
			A_Explode(10*random(1,5),36,0);
			A_SpawnItemEx("BuellerPuff");
		}
	XDeath:
		TNT1 A 0 {
			for(int MakeTheBastardsDieForTheirCountry = 0; MakeTheBastardsDieForTheirCountry < 10; MakeTheBastardsDieForTheirCountry++) {
				A_SpawnItemEx("BrowningShrapnel",0,0,0,
					frandom(50.0,20.0),frandom(50.0,20.0),
					frandom(50.0,20.0) * frandom(-1,1),
					frandom(0.0,360.0),SXF_TRANSFERPOINTERS);
			}
		}
		Stop;
	}
}

class BrowningShrapnel : ThrottleBullet
{
	Default
	{
		Radius 5;
		Height 4;
		MissileHeight 8;
		Speed 50;
		DamageFunction (3*random(1,5));
		Obituary "%o was nailed by %k's ''Browning'' bullet.";
		Scale 0.33;
		Decal "";
	}
	
	States
	{
	Spawn:
		TRAC A random(1,2) Bright A_ChangeVelocity(0, 0, -0.25, CVF_RELATIVE);
		Stop;
	Death:
		TNT1 A 0;
		Stop;
	XDeath:
		TNT1 A 0;
		Stop;
	}
}

class ThrottleTrail : Actor
{
	Default
	{
		Alpha 0.0;
		Renderstyle "Translucent";
		+NOINTERACTION
		+FORCEXYBILLBOARD
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIf(GetCvar("TB_SmokeReduction") >= 1, "Null");
		TNT1 A 0 A_Jump(256, "SpriteA", "SpriteB", "SpriteC", "SpriteD");
	SpriteA:
		DYMI E 0 A_Jump(256, "FadeIn");
	SpriteB:
		DYMI F 0 A_Jump(256, "FadeIn");
	SpriteC:
		DYMI G 0 A_Jump(256, "FadeIn");
	SpriteD:
		DYMI H 0 A_Jump(256, "FadeIn");
	FadeIn:
		"####" "#" 0 A_SetScale(FRandom(0.0325, 0.025));
		Goto RealFadeIn;
	RealFadeIn:
		"####" "#" 1 A_FadeIn(FRandom(0.1, 0.05));
		"####" "#" 0 A_JumpIf(Alpha >= 0.25, "FadeOut");
		Loop;
	FadeOut:
		"####" "#" 1 A_FadeOut(FRandom(0.125,0.075));
		"####" "#" 0 A_SetScale(Scale.X - FRandom(0.05, 0.1));
		Loop;
	}
}