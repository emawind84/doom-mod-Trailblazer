class AmmoJunkieItem : TBPowerupBase
{
	Default
	{
		Inventory.PickupMessage "$GOTAMMOJUNKIE";
		Inventory.PickupSound "AmmoJunkie/Pickup";
	}
	States
	{
	Spawn:
		TBAJ AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("JunkieFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("AmmoJunkieParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
		
	Pickup:
		TNT1 A 0 {
			//Alchemist's Dream storing.
			if(CountInv("AlchemistsDream") && 
			  (CountInv("AmmoJunkiePortable") < 3) &&
			   GetPlayerInput(INPUT_BUTTONS) & BT_USE)
			{
				A_Print("$AMMOJUNKIESTORED");
				A_GiveInventory("AmmoJunkiePortable",1);
				Return ResolveState("Null");
			}
			//Stuff.
			A_SetMugshotState("Grin");
			A_SpawnItemEx("AmmoJunkieEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			A_GiveInventory("AmmoJunkie");
			
			//Alchemist's Potency bonus.
			If(CountInv("AlchemistsPotency")) {
				A_GiveInventory("AmmoJunkieBoost");
			}
			Return ResolveState(null);
		}
		Stop;
	}
}

class AmmoJunkie : PowerupGiver
{
	Default
	{
		Inventory.PickupMessage "$GOTAMMOJUNKIE";
		Inventory.PickupSound "AmmoJunkie/Pickup";
		Powerup.Type "PowerAmmoJunkie";
		Powerup.Color 'Yellow', 0.05;
		Powerup.Duration -45;
		Renderstyle 'Add';
		+FLOATBOB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
	}
	
	Int User_Count;
	
	States
	{
	Spawn:
		TBAJ AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("JunkieFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("AmmoJunkieParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	}
}

class PowerAmmoJunkie : PowerInfiniteAmmo
{	
	Default
	{
		Inventory.Icon "INFAMMO0";
	}
}

//Potency upgrade
class AmmoJunkieBoost : PowerupGiver
{
	Default
	{
		Powerup.Duration -15;
		Powerup.Type "PowerAmmoJunkie";
		Inventory.MaxAmount 0;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ADDITIVETIME
	}
}

//Stored powerup
class AmmoJunkiePortable : TBPowerupPortableBase
{
	Default
	{
		Inventory.PickupMessage "$GOTAMMOJUNKIE";
		Inventory.Icon 'ARTITBAJ';
		Inventory.PickupSound "AmmoJunkie/Pickup";
		Tag "Ammo Junkie";
	}
	
	States
	{
	Spawn:
		TBAJ AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("JunkieFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("AmmoJunkieParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	Use:
		TNT1 A 0 {
			//Stuff.
			A_SetMugshotState("Grin");
			A_SetBlend("Yellow",0.3,70);
			A_PlaySound("AmmoJunkie/Pickup",CHAN_AUTO);
			A_SpawnItemEx("AmmoJunkieEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			A_GiveInventory("AmmoJunkie");

			//Alchemist's Potency bonus.
			If(CountInv("AlchemistsPotency")) {
				A_GiveInventory("AmmoJunkieBoost");
			}
		}
		Stop;
	} 
}

//Eyecandy
class JunkieFade : TBFadeBase
{
	States
	{
	Spawn:
		TBAJ C 0;
		Goto Super::Fade;
	}
}

class AmmoJunkieParticle : TBItemParticle
{
	States
	{
	Spawn:
		YPRT A 0;
	SetScale:
		"####" "#" 0 A_SetScale(0.1);
	Main:
		"####" "#" 1 Bright { 
			A_FadeOut(frandom(0.02,0.04));
			A_ChangeVelocity(0,0,frandom(-0.1,0.15),CVF_RELATIVE);
			A_SetScale(Scale.X-frandom(-0.01,0.02));
			Return A_JumpIf(Scale.X <= 0,"Null");
		}
		Loop;
	}
}

class AmmoJunkieEffect : TBPowerupEffect
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			for (User_Counter = 0; User_Counter < 6; User_Counter = User_Counter + 1)
			{
				A_SetAngle(frandom(0.0,360.0));
				A_SpawnItemEx("AmmoJunkiePart",0,0,0,0,0,0,0,SXF_CLIENTSIDE|SXF_TRANSFERPOINTERS);
			}
			User_Counter = 40;
		}
		Goto Super::Loop2;
	}
}

class AmmoJunkiePart : TBPowerupPart
{
	States
	{
	Spawn:
		PSHK D 0;
		Goto Super::Setup;
	}
}