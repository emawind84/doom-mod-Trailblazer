class InvulsphereItem : TBPowerupBase replaces InvulnerabilitySphere
{
	Default
	{
		Inventory.PickupMessage "$GOTINVULSPHERE";
		Inventory.PickupSound "Invulnerability/Pickup";
	}
	
	States
	{
	Spawn:
		TBIS AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("InvulFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("InvulsphereParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
		
	Pickup:
		TNT1 A 0 {
			//Alchemist's Dream storing.
			if(CountInv("AlchemistsDream") &&
			  (CountInv("InvulspherePortable") < 3) &&
			   GetPlayerInput(INPUT_BUTTONS) & BT_USE)
			{
				A_Print("$INVULSPHERESTORED");
				A_GiveInventory("InvulspherePortable",1);
				Return ResolveState("Null");
			}
			//Stuff.
			A_GiveInventory("Invulsphere2");
			A_SpawnItemEx("InvulsphereEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			
			//Alchemist's Potency bonus.
			If(CountInv("AlchemistsPotency")) {
				A_GiveInventory("Invulsphere2Boost");
			}
			Return ResolveState(null);
		}
		Stop;
	}
}

class Invulsphere2 : InvulnerabilitySphere
{
	Default
	{
		Inventory.PickupMessage "$GOTINVULSPHERE";
		Powerup.Type "PowerGodMode";
		Powerup.Color "Yellow", 0.05;
		Inventory.PickupSound "Invulnerability/Pickup";
		Renderstyle 'Add';
		+FLOATBOB
	}
	
	Int User_Count;
	
	States
	{
	Spawn:
		TBIS AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("InvulFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("InvulsphereParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	}
}

class PowerGodMode : PowerInvulnerable
{
	Default
	{
		Powerup.Duration -30;
		Inventory.Icon "GDMOD0";
	}
}

//Potency upgrade
class Invulsphere2Boost : PowerupGiver
{
	Default
	{
		Powerup.Duration -15;
		Powerup.Type "PowerGodMode";
		Inventory.MaxAmount 0;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ADDITIVETIME
	}
}

//Stored powerup
class InvulspherePortable : TBPowerupPortableBase
{
	Default
	{
		Inventory.PickupMessage "$GOTINVULSPHERE";
		Inventory.Icon 'ARTITBIS';
		Inventory.PickupSound "Invulnerability/Pickup";
		Tag "Invulnerability Sphere";
	}
	
	States
	{
	Spawn:
		TBIS AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("InvulFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("InvulsphereParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	Use:
		TNT1 A 0 {
			//Stuff.
			A_SetBlend("Green",0.3,70);
			A_PlaySound("Invulnerability/Pickup",CHAN_AUTO);
			A_GiveInventory("Invulsphere2");
			A_SpawnItemEx("InvulsphereEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			
			//Alchemist's Potency bonus.
			If(CountInv("AlchemistsPotency")) {
				A_GiveInventory("Invulsphere2Boost");
			}
		}
		Stop;
	} 
}

//Eyecandy
class InvulFade : TBFadeBase
{
	States
	{
	Spawn:
		TBIS C 0;
		Goto Super::Fade;
	}
}

class InvulsphereParticle : TBItemParticle
{
	States
	{
	Spawn:
		GPRT A 0;
	SetScale:
		"####" "#" 0 A_SetScale(0.1);
	Main:
		"####" "#" 0;

		"####" "#" 1 Bright	{
			A_FadeOut(frandom(0.02,0.04));
			A_ChangeVelocity(0,0,frandom(-0.1,0.15),CVF_RELATIVE);
			A_SetScale(Scale.X-frandom(-0.01,0.02));
			Return A_JumpIf(Scale.X <= 0,"Null");
		}
		Loop;
	}
}

class InvulsphereEffect : TBPowerupEffect
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			for (User_Counter = 0; User_Counter < 6; User_Counter = User_Counter + 1)
			{
				A_SetAngle(frandom(0.0,360.0));
				A_SpawnItemEx("InvulspherePart",0,0,0,0,0,0,0,SXF_CLIENTSIDE|SXF_TRANSFERPOINTERS);
			}
			User_Counter = 40;
		}
		Goto Super::Loop2;
	}
}

class InvulspherePart : TBPowerupPart
{
	States
	{
	Spawn:
		PSHK C 0;
		Goto Super::Setup;
	}
}