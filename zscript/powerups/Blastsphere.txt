class Blastsphere : TBPowerupBase
{
	Default
	{
		Inventory.PickupMessage "$GOTBLASTSPHERE";
		Inventory.PickupSound "Lucky/Strike";
	}
	
	int Blastpiece;
	
	States
	{
	Spawn:
		TBBS AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("BlastsphereFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("BlastsphereParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	Use:
		TNT1 A 0 {
			//Alchemist's Dream storing.
			if(CountInv("AlchemistsDream") &&
			  (CountInv("BlastspherePortable") < 25) &&
			   GetPlayerInput(INPUT_BUTTONS) & BT_USE)
			{
				If(CountInv("PowerQuadDamage")) {
					A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
				}
				A_Print("$BLASTSPHERESTORED");
				A_GiveInventory("BlastspherePortable",1);
				Return ResolveState("Null");
			}
			//Stuff.
			A_SpawnItemEx("BlastsphereEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			A_SpawnItemEx("BlastsphereBlast",0,0,0,0,0,0,0,SXF_SETTARGET);
			
			for (Invoker.Blastpiece = 0; Invoker.Blastpiece < 40; Invoker.Blastpiece = Invoker.Blastpiece + 1)
			{
				//A_FireCustomMissile("NutcrackerShatterBullet",frandom(360.0,0.0),0,0,0,0,frandom(6.0,-6.0));
				A_FireProjectile("NutcrackerShatterBullet", frandom(360.0,0.0),0,0,0,0,frandom(6.0,-6.0));
			}
			
			Return ResolveState(null);
		}
		Stop;
		
	}
}

class BlastsphereHexen : Blastsphere
{
	States
	{
	Use:
		//Alchemist's Dream storing.
		TNT1 A 0 A_JumpIf(CountInv("BlastspherePortable") < 25, 1);
		Fail;
		TNT1 A 0 A_GiveInventory("BlastspherePortable");
		Stop;
	}
}

//Stored powerup
class BlastspherePortable : TBPowerupPortableBase
{
	Default
	{
		Inventory.PickupMessage "$GOTBLASTSPHERE";
		Inventory.Icon 'ARTITBBS';
		Inventory.MaxAmount 25;
		Inventory.InterHubAmount 25;
		Inventory.PickupSound "Lucky/Strike";
		Tag "Blastsphere";
	}
	
	int Blastpiece;
	
	States
	{
	Spawn:
		TBBS AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBB 1 Bright {
			If(!(A_CheckSight("Null") || GetCVar("TB_ParticleReduction")))
			{
				If(Invoker.User_Count % 4 == 0)
				{
					A_SpawnItemEx("BlastsphereFade",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
					Invoker.User_Count = 0;
				}
				Invoker.User_Count = Invoker.User_Count + 1;
				A_SpawnItemEx("BlastsphereParticle",
				frandom(10.0,-10.0),frandom(10.0,-10.0),35+frandom(10.0,-10.0),
				frandom(0.6,-0.6),frandom(0.6,-0.6),frandom(1.2,0.4),
				frandom(0.0,360.0),SXF_CLIENTSIDE,64);
			}
		}
		Loop;
	Use:
		TNT1 A 0 {
			A_SetBlend("Orange",0.1,70);
				If(CountInv("PowerQuadDamage")) {
					A_PlaySound("QuadDamage/Fire", CHAN_AUTO);
					A_SetBlend("Blue",0.1,70);
				}
			A_PlaySound("Lucky/Strike",CHAN_AUTO);
			A_SpawnItemEx("BlastsphereEffect",0,0,0,0,0,0,0,SXF_SETTARGET);
			A_SpawnItemEx("BlastsphereBlast",0,0,0,0,0,0,0,SXF_SETTARGET);
			
			for (Invoker.Blastpiece = 0; Invoker.Blastpiece < 40; Invoker.Blastpiece = Invoker.Blastpiece + 1)
			{
				//A_FireCustomMissile("NutcrackerShatterBullet",frandom(360.0,0.0),0,0,0,0,frandom(6.0,-6.0));
				A_FireProjectile("NutcrackerShatterBullet", frandom(360.0,0.0),0,0,0,0,frandom(6.0,-6.0));
			}
		}
		Stop;
	} 
}

class BlastsphereBlast : Actor //Maslo maslane.
{
	Default
	{
		Projectile;
		DamageType 'MasteringExplosions';
		+NOINTERACTION
		+FORCERADIUSDMG
	}
	
	int User_Blastspan;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			User_Blastspan = 14;
			
			A_PlaySound("Spikebomb/Explosion",CHAN_AUTO,0.9);
			A_PlaySound("Spikebomb/Add",CHAN_AUTO);
			A_PlaySound("Spikebomb/Far",CHAN_AUTO,0.8);
			
			A_SpawnItemEx("SpipeMain",0,0,0,0,0,0,0,SXF_CLIENTSIDE,0);
			//A_SpawnItemEx("BlastsphereShatter",0,0,35,0,0,0,0,SXF_TRANSFERPOINTERS);
			
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN);
			A_QuakeEx(3,3,3,55,0,768,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN);
			A_QuakeEx(7,7,7,55,0,384,"none",QF_SCALEDOWN|QF_WAVE,0.75,0.75,0.75);
			
			A_Explode(250,364,0,1);
			A_Explode(150,256,0,1);
		}
	DeathLoop:
		TNT1 A 4 {
			User_Blastspan = User_Blastspan - 1;
			A_Explode(20,364,0,1);
			A_Explode(10,256,1,1);
			Return A_JumpIf(User_Blastspan <= 0, 1);
		}
		Loop;
		TNT1 A 6;
		Stop;
	}
}

class BlastsphereShatter : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
	}
	
	int User_Counter;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { User_Counter = 40; }
	Looplet:
		TNT1 A 0 {
			A_SpawnItemEx("NutcrackerShatterBullet",0,0,0,
				frandom(125.0,100.0),frandom(frandom(4.0,16.0),
				frandom(-4.0,-16.0)),frandom(0.0,360.0),SXF_TRANSFERPOINTERS,0);
			User_Counter = User_Counter - 1;
			Return A_JumpIf(User_Counter <= 0, "Null");
		}
		Loop;
	}
}

class BlastsphereFade : TBFadeBase
{
	States
	{
	Spawn:
		TBBS C 0;
		Goto Super::Fade;
	}
}

class BlastsphereParticle : TBItemParticle
{
	States
	{
	Spawn:
		BLAP A 0;
	SetScale:
		"####" "#" 0 A_SetScale(0.1);
	Main:
		"####" "#" 1 Bright {
			A_FadeOut(frandom(0.02,0.04));
			A_ChangeVelocity(0,0,frandom(-0.1,0.15),CVF_RELATIVE);
			A_SetScale(Scale.X-frandom(-0.01,0.02));
			Return A_JumpIf(Scale.X <= 0,"Null");
		}
		Loop;
	}
}

class BlastsphereEffect : TBPowerupEffect
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			for (User_Counter = 0; User_Counter < 6; User_Counter = User_Counter + 1)
			{
				A_SetAngle(frandom(0.0,360.0));
				A_SpawnItemEx("BlastpherePart",0,0,0,0,0,0,0,SXF_CLIENTSIDE|SXF_TRANSFERPOINTERS);
			}
			User_Counter = 40;
		}
		Goto Super::Loop2;
	}
}

class BlastpherePart : TBPowerupPart
{
	States
	{
	Spawn:
		PSHK F 0;
		Goto Super::Setup;
	}
}